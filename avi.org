#+PROPERTY: header-args :tangle .emacs.el
#+STARTUP: showeverything
* TODO AVI

** TODO Philosophy

We are all seekers. We are moved by an unseen gravity. Our path is illuminated
by an unseen light. We discover those infinite and mysterious dimensions of
ourselves. In the process we change and then the world changes. Then we become
part of the world and all of creation again. Attempting to capture one path, I
recorded this journey here.

It has occurred in three stages:

1) Touched by Willful Determination (Sankalpa [fn:a8dd9e04: https://en.wikipedia.org/wiki/Sankalpa_(Hindu_thought)])
2) Absorbed by the Expression of Creativity (Unique Purusha [fn:7b0aa25c: https://en.wikipedia.org/wiki/Purusha])
3) Unification With Infinite Inspiration (Universal Purusha)

**** TODO Sankalpa

When you hear the timeless whisper of Sankalpa, the inner-most chamber of your
heart will hear it. Your heart will also heighten your attention to that whisper
of love. Both will stay with you in the form of an infinite ember that is yours
to fan and flame. My whisper came simply in the form of trying to "do a good job
at what I do".

By trade I am a Software Developer [fn:6e6bfa2b: https://en.wikipedia.org/wiki/Software_developer].
The trade is in its infancy. In many years it will be recognized among all of
the other great trades of mankind. We don't have many tools. We try to choose
the best. EMACS [fn:a18521af: https://www.gnu.org/software/emacs/emacs.html] is
the best and I chose it. Then I set out the hone my expertise of that tool in
the form of an ideal configuration. The next section is my first thoughtful
configuration. It was an important first step and it revealed my philosophy.

The following system configuration represents a worldview focused upon the tools
being used. The title of the system is revealing. It reminds me of the question
often posed "Have you ever heard of a scalpel scientist? No? Well how about a
computer scientist?". That makes the point pretty well. That point can only be
made in retrospect. Quantifying efforts makes them visible. Visibility allows
observation and reproducibility. Those first steps were delightful and critical
to making sense of many aspects of the world. In any valuable endeavor, sincere
effort and willful-determination are required no matter the outcome. Those first
investments appear below.

***** TODO The Care And Conservation Of Computer Files (TC3F)

#+begin_comment
This section will never be tangled.
#+end_comment

****** Audience [fn:6873a93e: http://dictionary.reference.com/cite.html?qh=audience&ia=luna]

Who should be reading this?
Possibly…
- Entire document: Software engineers who want to do the above [fn:15b6c04f: https://en.wikipedia.org/wiki/Software_engineer]
  - If you are using this an excuse to learn Lisp, then know that it is really,
    really simple. Here is how it goes:
    - 3s to download Emacs
    - 3m to learn how to run code
    - 3h to learn the IDE
    - 3d to master the language
- Decisions & Assembly: Existing Emacs users… daily usage and non-trivial customization
  An interest in using package/el-get/cask and org-mode literate programming are the only thing that would motivate anyone to read this really.

This is an unfinished and experimental document. All successes with it
may be attributed to all of the folks who provided these wonderful tools. All
failures with it may be attributed to me.

Why should they be reading this?
#+BEGIN_QUOTE
The expectations of life depend upon diligence; the mechanic that would perfect
his work must first sharpen his tools. [fn:c5de8da5: http://www.brainyquote.com/quotes/quotes/c/confucius141110.html]
#+END_QUOTE

****** Cogito ergo sum [fn:bfef9921: https://en.wikipedia.org/wiki/Cogito_ergo_sum]

What was I thinking?
- creation :: "the act of producing or causing to exist" [fn:77af012a: http://dictionary.reference.com/browse/creation]
- conservation :: "prevention of injury, decay, waste, or loss" [fn:c6f84dda: http://dictionary.reference.com/browse/Conservation]
- computer files :: "a file maintained in computer-readable form" [fn:49968ef8: http://dictionary.reference.com/browse/computer%20file]

Pursuing these goals, in the manner of literate programming, also serves to
better myself, as captured here:

#+BEGIN_QUOTE
The expectations of life depend upon diligence; the mechanic that would perfect
his work must first sharpen his tools. [fn:485efd70: https://www.brainyquote.com/quotes/quotes/c/confucius141110.html]
#+END_QUOTE

****** Means [fn:efbd05b2: http://dictionary.reference.com/cite.html?qh=tools&ia=luna]

How do most people do it?
- File maintainer :: a person and program responsible for TC3F
- COTS :: edit, VI, Emacs, IntelliJ Idea, Visual Studio [fn:95c9649d: https://en.wikipedia.org/wiki/Commercial_off-the-shelf]
- Bespoke :: custom software [fn:9bd5543e: https://en.wikipedia.org/wiki/Custom_software]

****** Madness [fn:11: http://dictionary.reference.com/browse/madness]

What about their raison detre? [fn:47c1450f: http://dictionary.reference.com/cite.html?qh=raison%20detre&ia=luna]
- Wonderful, wonderful stock tooling, 80%
- Can tool-makers build it perfectly for us all? [fn:13: http://www.wisdomandwonder.com/article/509/lambda-the-ultimate-goto]
- Either way:
#+BEGIN_QUOTE
Thinking is required.
#+END_QUOTE

******* Goal

What is my measure of success?
#+BEGIN_CENTER
To provide a self-supportable environment in which the creation and conservation
of computer files may occur with ease
#+END_CENTER

****** Decision

#+BEGIN_QUOTE
GNU Emacs is an extensible, customizable text editor [fn:a9219a62: https://www.gnu.org/software/emacs/]
#+END_QUOTE

****** Methodology [fn:8e6c1615: http://dictionary.reference.com/cite.html?qh=method&ia=luna]

How will I customize it?

Agile [fn:99b4e7dd: https://en.wikipedia.org/wiki/Agile_software_development]
- Product Backlog
- Sprint Backlog
- Review, Refine, and Reiterate
- COTS libraries
- Capture rationale and reasons along with things I did or didn't do and why
- Includes links to everything

Note: How you break up the initialization of a system like Emacs is mostly
personal preference. Although org-mode (Babel) lets you tell a story, I was
coming from a pretty structured configuration file to begin with. In the future, it
might be interesting to look at this system from scratch in terms of doing
literate programming. Fortunately, it provides that freedom out of the box.

******* Medium

How will explain what I did?
- Audience-appropriate presentations
- Reproducible research
- Reusable data structures

****** Developmental Values

******* Traits

- [X] Pleasing user experience
- [X] Pervasive orthogonality [fn:d104e6b8: http://dictionary.reference.com/browse/orthogonal]
- [X] Self-supportable

******* Coding

- [X] Completion
- [X] Debugging
- [X] Templates

******* Editing

- [X] Auto-indenting
- [X] Binary file editing, hex editor
- [X] Code folding
- [X] Code formatting
- [X] Diffing
- [X] Heavily used languages:
  - [X] CSS
  - [X] Elisp
  - [X] HTML
  - [X] Graphviz
  - [X] JSON
  - [X] JavaScript
  - [X] Make
  - [X] Markdown
  - [X] R
  - [X] Scheme
  - [X] shell
- [X] Lightly used languages:
  - [X] go
  - [X] OCaml
  - [X] SML
  - [X] Clojure
  - [X] Perl
  - [X] Python
  - [X] Ruby
- [X] Incremental selection
- [X] LaTeX
- [X] SEXP Support
- [X] Spell-checking
- [X] Structured navigation
- [X] Syntax highlighting
- [X] Tab management

******* Development

- [X] Build tools: make
- [X] Copyright notice, analysis, and standards
- [X] Dependency management
- [X] Diagramming
- [X] UML
- [X] Version control: git, svn, bzr, cvs, rcs
- [X] Workflow

****** Operational Values

******* Fonts

- [X] Focus on easily-screen-readable, mono-spaced
- [X] Research suggests that san-serif fonts are easier to read [fn:e2c60dbb: http://thenextweb.com/dd/2011/03/02/whats-the-most-readable-font-for-the-screen/#!uCcs8] [fn:ffab7a5b: http://www.webpagecontent.com/arc_archive/182/5/] [fn:e205ad03: http://www.awaionline.com/2011/10/the-best-fonts-to-use-in-print-online-and-email/] [fn:e2364216: https://tex.stackexchange.com/questions/20149/which-font-is-the-most-comfortable-for-on-screen-viewing] [fn:22: http://river-valley.tv/minion-math-a-new-math-font-family/] [fn:8ca6ae83: http://edutechwiki.unige.ch/en/Font_readability]
- [X] Research suggests that color doesn't matter; only contrast [fn:0faa1215: http://usabilitynews.org/the-effect-of-typeface-on-the-perception-of-email/]
  [fn:d6fea857: http://usabilitynews.org/know-your-typefaces-semantic-differential-presentation-of-40-onscreen-typefaces/] [fn:26: http://typoface.blogspot.com/2009/08/academic-base.html] [fn:a0cb9414: http://liinwww.ira.uka.de/bibliography/Typesetting/reading.html] [fn:763d94de: http://www.kathymarks.com/archives/2006/11/best_fonts_for_the_web_1.html] [fn:4b3fa8ae: http://psychology.wichita.edu/surl/usabilitynews/52/uk_font.htm] [fn:1ad6b453: http://usabilitynews.org/a-comparison-of-popular-online-fonts-which-size-and-type-is-best/] [fn:d0e1495e: http://usabilitynews.org/a-comparison-of-popular-online-fonts-which-is-best-and-when/]
- [X] Unicode support is critical

******* Images

- [X] ASCII art

******* Spreadsheet

- [X] Calculation
- [X] Data management
- [X] Import/Export

******* Files

- [X] Auto-save & synchronize
- [X] Encryption
- [X] File-system/directory management
- [X] Project structure
- [X] Search everywhere

******* Commands

- [X] Key recording
- [X] Macros
- [X] History of all things: files, commands, cursor locations
- [X] Undo

******* Publishing

- [X] Code
- [X] Multiple formats: HTML, JavaScript, PDF

******* Terminal

- [X] Cross-platform shell
- [X] Games

******* Remote file access and management

- [X] SSH
- [X] SCP

******* Music

- [X] LilyPond

******* Communications

- [X] IRC

****** Observations

- Went stunningly well
- Stopped logging hours spent >200h
- This configuration was developed organically quite differently from the original idea
- Literate programming allowed an insanely flexible and freeing experience
- This one massive experience for me made a powerful, positive, life-changing
  impression on me
- My laziness and poor habits were made quite apparent going through the efforts
  to consider, realize, and support this system
- Before beginning I had no value system about testing this kind of artifact
- If this attribution, which is /only/ about Wolfram's MathWorld [fn:027a87a4: http://mathworld.wolfram.com/], the you may be interested in this style of programming and literature:
#+begin_quote
Created, developed, and nurtured by Eric Weisstein at Wolfram Research
#+end_quote

****** La trahison des images [fn:2bb0a70b: https://en.wikipedia.org/wiki/The_Treachery_of_Images]

Where else has this acronym shown up?
- #cc33ff :: bright purple color [fn:9b8e5e86: http://www.color-hex.com/color/cc33ff]
- Commander, U.S. Third Fleet :: WWII navy [fn:2e96ef97: https://secure.flickr.com/people/c3f/]
- A spasmogenic fragment :: a peptide [fn:07d2fa50: http://books.google.com/books?id=L4CI-qkhuQ8C]

**** TODO Unique Purusha

***** TODO Import All Of Alec

***** TODO Ends & Means

There are so many ways to customize a system. Is intent or pragmatics more
important? In my philosophy, the nature of the /end/ is contained within the
properties of the /means/ themselves. They are inseparable. The traits are
the fundamental aspects of this system. They are things that are critical, they
are *everything*. Here my goal is to capture both the means and the ends.

These are the minimum fundamental features to allow for the fluid delivery and
execution of the creative experience within this medium.

The capture occurs sequentially. The ends are listed first though, because they
are much more meaningful and inspiring to me than the means, at least in "listed
here form". Their execution, of course, is much more visceral and fun!

The means used to be broken up into highly categorical sections. It made sense,
but it didn't read well. It might make sense from a reference perspective, but
that was about it. This document focuses more on the flow. Since the fundamental
means /ought/ to be concise, they are intended to be read at a single sitting.

***** TODO Ends (ALEC)

This system has changed who I am and how I think. Because it is easier to focus
on the tools rather than the intent, on the means versus the ends, I focus on this
system, this configuration of Emacs. My system is a provider, a realization, of
a language for expressing creativity. 𝔸𝕃𝔼ℂ. ALEC's a Language for Expressing
Creativity. That is a truly and utterly beautiful thing to ponder.

The expression of creativity is why we are born human. Five of our senses go out
into the world searching, always searching. In our time-space, the expressions
that may be consumed by the eye (paintings, graphic arts) and consumed by the
ear (music) are so, so lovely, and easy for us to understand (How do you address
someone whose /true/ name is Symphony?). We are here to let that voice sing, and
we want all five senses to help do it, for the maximization of expressivity.

The song, that sweet celestial song, is sometimes more difficult for people to
hear. The honey-kissed embrace of one's love feels different than a song, and
different than laughing at a joke, but they are all the creative act. Gardening,
selling, collecting, tending… they are all part of the creative act that makes
us again be born human. We always seem to focus on the configuration of those
actions (time, space, causality, and identity), the build of those tools,
necessary to perform the creative act. With time and patience, we will know the
true nature of things. Part of the path is indeed attaining mastery. Mastery
over ourselves, mostly, by some way that is gentle and kind. That action, that
attempt, for me, has partially culminated in the aggregation of a lifetime of
mastery of tools and programming languages and ideas and studies and training
and collaboration and mystery and magic and laughing, in this birth, in the
artifact called ALEC, and ALEC can only be expressed, for me, for now, with
Emacs.

This system is no longer "Emacs". It is not its disparate packages. They are
tools, yes, and more importantly, they are expressions of creativity. Together
in Emacs, in ALEC, they are composed, like parts of a symphony, together, to
allow for the ultimate in the act of creative expression. The tools themselves
possess these traits, both in their implementation and their intent. That is
traditional, in that, the properties and traits expressed by these "words",
these compositional units, have the properties and traits of the things
expressed by these "words". "Words" is the  most expressive element that I can
think of right now, for things that can be atoms, and yet be combined to form
sentences, something larger and more expressive, in a particular language,
which itself can quite magically express ideas, about itself, or about anything
else in existence.

It is like watching a beautiful lotus blooming, spreading its pedals, having
been nourished by the fertile soil, protected in its pond, knowing that it must
strive to reach higher, nurtured by Mother Sun. The very act, the ultimate act
of creative expression, that very action contains itself and is culminated by
itself. It is that which it is trying to achieve, and to be that, is to do that,
for itself and for all of creation. This ultimate act of creative expression, is
present in the manifestation of Emacs and the packages and the users who come
together to form a perfect symphony of creative expression in a form that
may be captured and represented as a computer file, so humble and modest, just
like a small seed of a proud and mighty Redwood tree that will eventually reach
hundreds and hundreds of feet into the sky and towards Mother Sun, contains
that which it will become in it's own existence, so too does it contain its own
beautiful destiny in the seeds of beauty and creative expression that are
produced with ALEC (in every form, not just the one described by this document
of course!).

The blossoming of the expression of the computational act, and the petals that
opened in the form of the Turing's machine, Church's Lambda calculus, and
Post's Tag System, are beautiful, and still, are only petals, that
carry the sweet fragrance, because a fragrance is part of a moment, which is
finite, as is every configuration of this reality. The beauty is still as sweet.
The key is seeing the inherent beauty, the source without start and without end,
and then being able to see that in everyone and everything.

That thing, which was present before the expression of creativity, and will
exist after it, which is not subject to the laws of time, space, causality, and
identity, is the point that everyone surely wishes to re-visit. That quest,
/the/ great motivator of the most softly spoken and heartfelt desire, itself is
surely yet another expression of /that which is gentle and kind/. The steps taken
on that quest, despite being driven by that perfect intent, are /still/ subject to
the four boundaries of this reality. Those actions, defined by configurations,
like the petals of the lotus, retaining its sweet fragrance, can, will, and must
fade, but, we will shine on in the sweet embrace of Mother Sun, knowing that
loving and warm embrace of sweet perfection, in our one, and true, home.

****** The desire

"I want". If only all conversations would start out with a clear goal in mind.
All too often we waste our own, and other people's time talking and simply
trying to figure out what it is what we want. For most of us, "it", is that
thing that will solve all of our problems in life and make us happy. Technology
is no exception.

The perfect integrated development environment is a topic of constant
conversation. For good reason, for most of us it is our only tool. Unlike
carpenters and wood-workers who have a bevy of interesting and delightful tools,
we are stuck with but one. Fortunately for us, our singular tool allows
limitless creation, of tools and more. Alan Kay said it so well [fn:2e3b75ad: https://www.cs.indiana.edu/~rpjames/]:

#+BEGIN_QUOTE
The computer is a medium that can dynamically simulate the details of any other
medium, including media that cannot exist physically. It is not a tool, although
it can act like many tools. The computer is the first metamedium, and as such it
has degrees of freedom for representation and expression never before
encountered and as yet barely investigated. The protean nature of the computer
is such that it can act like a machine or like a language to be shaped and
exploited.
#+END_QUOTE

Even more succinctly, my measure of success is to:

#+BEGIN_CENTER
To provide a self-suportable environment in which the creation and conservation
of computer files may occur with ease
#+END_CENTER

As of writing, although there are many nice options out there, none of them
come within even light-years, of power that you are granted for working with a
computer as that metamedium, that GNU Emacs [fn:54b16b1c: https://www.gnu.org/software/emacs/]. With that in mind,
the following is what I actually want to do with it.

****** The story

The creativity that you apply and capture to assemble your system… this is where
all of the fun stuff is. Let me elaborate, everything in your artifacts are
valuable because they tell the story. Actually, they tell the story about a
story, a story that has yet to occur and also a story that has previously
occurred. It is here, where the actions lives, that all of those things are
learned, practiced, suffered accordingly from, and reveled in! In other words,
it is yet another story, a fun one.

If you haven't noticed by now, either by hearing rumors, reading accounts, or
learning of it yourself: human beings are story-oriented. Your ability to
successfully function in and contribute to society will be directly proportional
to your ability to listen to stories, tell others' stories, live your life such
that you have new stories to tell, and capture them in some form of persistent
storage. Stories grant us the power to learn from others wisdom that was
painfully acquired thousands of years ago, and it gives you a chance to
contribute the results of your hard work, for the future of humanity, too. A
belief system about the value of story-telling is essential, critical, and
mandatory to successfully achieve your goals with literate programming.

As I change, the story will change, and the action will change. The cycle will
never end.

Nevertheless, I will attempt to do my best here with the good part of me being
a flawless, rational, and logical human being to:

- Deliver a supportable system
- Deliver an adaptable system
- Deliver an expandable system

****** Inspirations

- Eric Weisstein :: Creator of MathWorld [fn:f0123b05: http://mathworld.wolfram.com/about/author.html]

**** TODO Universal Purursha

*** TODO First Express Values, Then Define Means

*** TODO Universal

*** TODO Theory of Opposites

*** TODO Representation of Decisions as Text in Storage

*** TODO Time Space Causality Identity (TSCI)

** TODO Org-Mode

*** TODO Should TSCI be Maintained in This Document?

Humans like to see things in order. With Noweb-Ref we can structure and tangle in any order
that want. Use your discretion. Assume more notes will follow.

** TODO Style Guide

*** TODO Header Arguments

- Document level are all upper case
- Heading level are upper case for the parent block and all lower case for the child block.
  Assuming that it is only ever one level of parent-child.
- Source block level are all lower case

*** TODO Headings

- Completed headings
  - Transitioned out from =DONE=
  - Don't end with punctuation
- Incomplete headings
  - Do whatever you want, they are not final
- Not sure whether or not to include references in headings
- Patch was recently added to do so
- Keep a single empty line before the start of the body of a heading and before
  the next heading. Org-Mode expects this formatting. Headings will collapse and
  expand as you expect.
- Capitalize every word

*** TODO List

- Single sentence items end with a period

*** TODO Names

**** TODO Packages And Artifacts

  - Referenced in written-language
    - Reading font
    - Capitalize whole words
    - Separate spaces with a single dash
  - Acronyms remain all upper case to distinguish from words for example "GNU"
    vs "Gnu".

**** TODO Code

- Monospaced markup in-line and source-blocks

**** TODO Features

- Can be express either as a [[Package]] or [[Code]]

*** TODO Source Blocks

- Tell the story
- Punctuate normally
- After periods where a new paragraph would appear is a natural place for a source block
  that expresses that which was just communicated
  - Indent like any paragraph, with an empty line separating them
- Only use a =:= when a list of blocks follows in the same way that you would format a list of text

*** TODO Hyperlinks

**** TODO Internal Links

- If the resource is contained within this document then it is an internal link.
- For a resource only linked once use a "text search" link
- For a resource linked 2 or more times
  - Give an ID to the target
  - Link to that ID

***** TODO Document how to create random link IDs in the parent

***** TODO Add reference to http://orgmode.org/manual/Internal-links.html#Internal-links

***** TODO Add startup set to pull latest? Pros and cons of each.

**** TODO External Links

- If the resource is not contained within this document then it is an external link.

***** TODO Add reference to http://orgmode.org/manual/External-links.html#External-links

***** TODO Add reference to http://orgmode.org/manual/Footnotes.html

***** TODO Explain when to use one vs other

* TODO Org-Mode

** TODO Installation

*** TODO Bring in installation decision stuff from ALEC

*** TODO Add reference to installation page

*** TODO Clarify in detail why it is important to run off HEAD, link to accessibility

*** TODO Explain how to make sure that you have the right Org-Mode loaded

A virgin-installation of EMACS comes with Org-Mode already installed. It is stable, reliable, and
predictable. It is a fine software product. AVI needs access to cutting edge features, immediate hot-fixes, and easy patch
creation. The easiest way to do this is the "Using Org's git repository" option. Before you start this set up, find out what
version of Org-Mode is built-in.

Start EMACS with the =-Q= argument so that only the built-libraries are loaded. Open the =*scratch*= buffer and evaluate the
expression =(org-version)=. Note it because the  code will load a newer version of Org-Mode. Quit EMACS.

Follow these instructions in a terminal:
- =cd ~=
- =mkdir src=
- =cd ~/src/=
- =git clone git://orgmode.org/org-mode.git=
- =cd org-mode/=
- =make autoloads=

Load the Org-Mode core distribution.

#+begin_src emacs-lisp
(add-to-list 'load-path "~/src/org-mode/lisp")
#+end_src

Load the Org-Mode-Contributions distribution.

#+begin_src emacs-lisp
(add-to-list 'load-path "~/src/org-mode/contrib/lisp")
#+end_src

Start EMACS normally.

*** TODO Decide if the setup steps should be tangled into a provisioning script to be executed before first-load. Consider
    the OSX provsioning experiment

*** TODO Can't remember the org-contrib package name, get it and update this documentation

*** TODO Should the setup script be idempotent?

* TODO Accessibility

** TODO Philosophy

** TODO Means

** TODO Fonts

** TODO User Experience

*** TODO Hardware

*** TODO Software

**** TODO Operating System

*** TODO EMACS

*** TODO Performance

*** TODO Languages

* TODO Critical Next Steps

- Mac key bindings
- Appearance
- Space Control
- Print out ALEC, cross-out migration
- Need Magit ASAP
