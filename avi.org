#+PROPERTY: header-args :tangle .emacs.el

#+STARTUP: showeverything

* TODO AVI

AVI is very inspirational.

AVI is a vehicle for inspiration.

** TODO Philosophy

We are all seekers. We are moved by an unseen gravity. Our path is illuminated
by an unseen light. We discover those infinite and mysterious dimensions of
ourselves. In the process we change and then the world changes. Then we become
part of the world and all of creation again. Attempting to capture one path, I
recorded this journey here.

It has occurred in three stages:

1) Touched by Willful Determination (Sankalpa [fn:a8dd9e04: https://en.wikipedia.org/wiki/Sankalpa_(Hindu_thought)])
2) Absorbed by the Expression of Creativity (Unique Purusha [fn:7b0aa25c: https://en.wikipedia.org/wiki/Purusha])
3) Unification With Infinite Inspiration (Universal Purusha)

**** TODO Sankalpa

When you hear the timeless whisper of Sankalpa, the inner-most chamber of your
heart will hear it. Your heart will also heighten your attention to that whisper
of love. Both will stay with you in the form of an infinite ember that is yours
to fan and flame. My whisper came simply in the form of trying to "do a good job
at what I do".

By trade I am a Software Developer [fn:6e6bfa2b: https://en.wikipedia.org/wiki/Software_developer].
The trade is in its infancy. In many years it will be recognized among all of
the other great trades of mankind. We don't have many tools. We try to choose
the best. EMACS [fn:a18521af: https://www.gnu.org/software/emacs/emacs.html] is
the best and I chose it. Then I set out the hone my expertise of that tool in
the form of an ideal configuration. The next section is my first thoughtful
configuration. It was an important first step and it revealed my philosophy.

The following system configuration represents a worldview focused upon the tools
being used. The title of the system is revealing. It reminds me of the question
often posed "Have you ever heard of a scalpel scientist? No? Well how about a
computer scientist?". That makes the point pretty well. That point can only be
made in retrospect. Quantifying efforts makes them visible. Visibility allows
observation and reproducibility. Those first steps were delightful and critical
to making sense of many aspects of the world. In any valuable endeavor, sincere
effort and willful-determination are required no matter the outcome. Those first
investments appear below.

***** TODO The Care And Conservation Of Computer Files (TC3F)

#+begin_comment
This section will never be tangled.
#+end_comment

****** Audience [fn:6873a93e: http://dictionary.reference.com/cite.html?qh=audience&ia=luna]

Who should be reading this?
Possibly…
- Entire document: Software engineers who want to do the above [fn:15b6c04f: https://en.wikipedia.org/wiki/Software_engineer]
  - If you are using this an excuse to learn Lisp, then know that it is really,
    really simple. Here is how it goes:
    - 3s to download Emacs
    - 3m to learn how to run code
    - 3h to learn the IDE
    - 3d to master the language
- Decisions & Assembly: Existing Emacs users… daily usage and non-trivial customization
  An interest in using package/el-get/cask and org-mode literate programming are the only thing that would motivate anyone to read this really.

This is an unfinished and experimental document. All successes with it
may be attributed to all of the folks who provided these wonderful tools. All
failures with it may be attributed to me.

Why should they be reading this?
#+BEGIN_QUOTE
The expectations of life depend upon diligence; the mechanic that would perfect
his work must first sharpen his tools. [fn:c5de8da5: http://www.brainyquote.com/quotes/quotes/c/confucius141110.html]
#+END_QUOTE

****** Cogito ergo sum [fn:bfef9921: https://en.wikipedia.org/wiki/Cogito_ergo_sum]

What was I thinking?
- creation :: "the act of producing or causing to exist" [fn:77af012a: http://dictionary.reference.com/browse/creation]
- conservation :: "prevention of injury, decay, waste, or loss" [fn:c6f84dda: http://dictionary.reference.com/browse/Conservation]
- computer files :: "a file maintained in computer-readable form" [fn:49968ef8: http://dictionary.reference.com/browse/computer%20file]

Pursuing these goals, in the manner of literate programming, also serves to
better myself, as captured here:

#+BEGIN_QUOTE
The expectations of life depend upon diligence; the mechanic that would perfect
his work must first sharpen his tools. [fn:485efd70: https://www.brainyquote.com/quotes/quotes/c/confucius141110.html]
#+END_QUOTE

****** Means [fn:efbd05b2: http://dictionary.reference.com/cite.html?qh=tools&ia=luna]

How do most people do it?
- File maintainer :: a person and program responsible for TC3F
- COTS :: edit, VI, Emacs, IntelliJ Idea, Visual Studio [fn:95c9649d: https://en.wikipedia.org/wiki/Commercial_off-the-shelf]
- Bespoke :: custom software [fn:9bd5543e: https://en.wikipedia.org/wiki/Custom_software]

****** Madness [fn:11: http://dictionary.reference.com/browse/madness]

What about their raison detre? [fn:47c1450f: http://dictionary.reference.com/cite.html?qh=raison%20detre&ia=luna]
- Wonderful, wonderful stock tooling, 80%
- Can tool-makers build it perfectly for us all? [fn:13: http://www.wisdomandwonder.com/article/509/lambda-the-ultimate-goto]
- Either way:
#+BEGIN_QUOTE
Thinking is required.
#+END_QUOTE

******* Goal

What is my measure of success?
#+BEGIN_CENTER
To provide a self-supportable environment in which the creation and conservation
of computer files may occur with ease
#+END_CENTER

****** Decision

#+BEGIN_QUOTE
GNU Emacs is an extensible, customizable text editor [fn:a9219a62: https://www.gnu.org/software/emacs/]
#+END_QUOTE

****** Methodology [fn:8e6c1615: http://dictionary.reference.com/cite.html?qh=method&ia=luna]

How will I customize it?

Agile [fn:99b4e7dd: https://en.wikipedia.org/wiki/Agile_software_development]
- Product Backlog
- Sprint Backlog
- Review, Refine, and Reiterate
- COTS libraries
- Capture rationale and reasons along with things I did or didn't do and why
- Includes links to everything

Note: How you break up the initialization of a system like Emacs is mostly
personal preference. Although org-mode (Babel) lets you tell a story, I was
coming from a pretty structured configuration file to begin with. In the future, it
might be interesting to look at this system from scratch in terms of doing
literate programming. Fortunately, it provides that freedom out of the box.

******* Medium

How will explain what I did?
- Audience-appropriate presentations
- Reproducible research
- Reusable data structures

****** Developmental Values

******* Traits

- [X] Pleasing user experience
- [X] Pervasive orthogonality [fn:d104e6b8: http://dictionary.reference.com/browse/orthogonal]
- [X] Self-supportable

******* Coding

- [X] Completion
- [X] Debugging
- [X] Templates

******* Editing

- [X] Auto-indenting
- [X] Binary file editing, hex editor
- [X] Code folding
- [X] Code formatting
- [X] Diffing
- [X] Heavily used languages:
  - [X] CSS
  - [X] Elisp
  - [X] HTML
  - [X] Graphviz
  - [X] JSON
  - [X] JavaScript
  - [X] Make
  - [X] Markdown
  - [X] R
  - [X] Scheme
  - [X] shell
- [X] Lightly used languages:
  - [X] go
  - [X] OCaml
  - [X] SML
  - [X] Clojure
  - [X] Perl
  - [X] Python
  - [X] Ruby
- [X] Incremental selection
- [X] LaTeX
- [X] SEXP Support
- [X] Spell-checking
- [X] Structured navigation
- [X] Syntax highlighting
- [X] Tab management

******* Development

- [X] Build tools: make
- [X] Copyright notice, analysis, and standards
- [X] Dependency management
- [X] Diagramming
- [X] UML
- [X] Version control: git, svn, bzr, cvs, rcs
- [X] Workflow

****** Operational Values

******* Fonts

- [X] Focus on easily-screen-readable, mono-spaced
- [X] Research suggests that san-serif fonts are easier to read [fn:e2c60dbb: http://thenextweb.com/dd/2011/03/02/whats-the-most-readable-font-for-the-screen/#!uCcs8] [fn:ffab7a5b: http://www.webpagecontent.com/arc_archive/182/5/] [fn:e205ad03: http://www.awaionline.com/2011/10/the-best-fonts-to-use-in-print-online-and-email/] [fn:e2364216: https://tex.stackexchange.com/questions/20149/which-font-is-the-most-comfortable-for-on-screen-viewing] [fn:22: http://river-valley.tv/minion-math-a-new-math-font-family/] [fn:8ca6ae83: http://edutechwiki.unige.ch/en/Font_readability]
- [X] Research suggests that color doesn't matter; only contrast [fn:0faa1215: http://usabilitynews.org/the-effect-of-typeface-on-the-perception-of-email/]
  [fn:d6fea857: http://usabilitynews.org/know-your-typefaces-semantic-differential-presentation-of-40-onscreen-typefaces/] [fn:26: http://typoface.blogspot.com/2009/08/academic-base.html] [fn:a0cb9414: http://liinwww.ira.uka.de/bibliography/Typesetting/reading.html] [fn:763d94de: http://www.kathymarks.com/archives/2006/11/best_fonts_for_the_web_1.html] [fn:4b3fa8ae: http://psychology.wichita.edu/surl/usabilitynews/52/uk_font.htm] [fn:1ad6b453: http://usabilitynews.org/a-comparison-of-popular-online-fonts-which-size-and-type-is-best/] [fn:d0e1495e: http://usabilitynews.org/a-comparison-of-popular-online-fonts-which-is-best-and-when/]
- [X] Unicode support is critical

******* Images

- [X] ASCII art

******* Spreadsheet

- [X] Calculation
- [X] Data management
- [X] Import/Export

******* Files

- [X] Auto-save & synchronize
- [X] Encryption
- [X] File-system/directory management
- [X] Project structure
- [X] Search everywhere

******* Commands

- [X] Key recording
- [X] Macros
- [X] History of all things: files, commands, cursor locations
- [X] Undo

******* Publishing

- [X] Code
- [X] Multiple formats: HTML, JavaScript, PDF

******* Terminal

- [X] Cross-platform shell
- [X] Games

******* Remote file access and management

- [X] SSH
- [X] SCP

******* Music

- [X] LilyPond

******* Communications

- [X] IRC

****** Observations

- Went stunningly well
- Stopped logging hours spent >200h
- This configuration was developed organically quite differently from the original idea
- Literate programming allowed an insanely flexible and freeing experience
- This one massive experience for me made a powerful, positive, life-changing
  impression on me
- My laziness and poor habits were made quite apparent going through the efforts
  to consider, realize, and support this system
- Before beginning I had no value system about testing this kind of artifact
- If this attribution, which is /only/ about Wolfram's MathWorld [fn:027a87a4: http://mathworld.wolfram.com/], the you may be interested in this style of programming and literature:
#+begin_quote
Created, developed, and nurtured by Eric Weisstein at Wolfram Research
#+end_quote

****** La trahison des images [fn:2bb0a70b: https://en.wikipedia.org/wiki/The_Treachery_of_Images]

Where else has this acronym shown up?
- #cc33ff :: bright purple color [fn:9b8e5e86: http://www.color-hex.com/color/cc33ff]
- Commander, U.S. Third Fleet :: WWII navy [fn:2e96ef97: https://secure.flickr.com/people/c3f/]
- A spasmogenic fragment :: a peptide [fn:07d2fa50: http://books.google.com/books?id=L4CI-qkhuQ8C]

**** TODO Unique Purusha

Literate Programming (LP) [fn:dc352072: https://en.wikipedia.org/wiki/Literate_programming] is a gift from the divine.
You might find that it is not universally unique, but it is to this reality.
TC3F was an important first step. It got me in touch with some bigger. It was
creativity itself. The name of that system is very revealing. It was still
closely associated with the tool. There was a big change though: the system
began to recognize it's operator. A language for the expression of creativity
requires someone to express it. That was a delightful and special time to see
the infinite light that shines inside of us.

That light is strong and it fuels us. It lets us explore and grow. That growth
is self-reflective. As the operator's experience and wisdom grow, it changes
both her and the system. The distinctions between them become smaller. For me
it raised more questions, and less answers and I'll always have fond memories of
that time. That system philosophy follows.

***** TODO Ends & Means

There are so many ways to customize a system. Is intent or pragmatics more
important? In my philosophy, the nature of the /end/ is contained within the
properties of the /means/ themselves. They are inseparable. The traits are
the fundamental aspects of this system. They are things that are critical, they
are *everything*. Here my goal is to capture both the means and the ends.

These are the minimum fundamental features to allow for the fluid delivery and
execution of the creative experience within this medium.

The capture occurs sequentially. The ends are listed first though, because they
are much more meaningful and inspiring to me than the means, at least in "listed
here form". Their execution, of course, is much more visceral and fun!

The means used to be broken up into highly categorical sections. It made sense,
but it didn't read well. It might make sense from a reference perspective, but
that was about it. This document focuses more on the flow. Since the fundamental
means /ought/ to be concise, they are intended to be read at a single sitting.

***** TODO Ends (ALEC)

This system has changed who I am and how I think. Because it is easier to focus
on the tools rather than the intent, on the means versus the ends, I focus on this
system, this configuration of Emacs. My system is a provider, a realization, of
a language for expressing creativity. 𝔸𝕃𝔼ℂ. ALEC's a Language for Expressing
Creativity. That is a truly and utterly beautiful thing to ponder.

The expression of creativity is why we are born human. Five of our senses go out
into the world searching, always searching. In our time-space, the expressions
that may be consumed by the eye (paintings, graphic arts) and consumed by the
ear (music) are so, so lovely, and easy for us to understand (How do you address
someone whose /true/ name is Symphony?). We are here to let that voice sing, and
we want all five senses to help do it, for the maximization of expressivity.

The song, that sweet celestial song, is sometimes more difficult for people to
hear. The honey-kissed embrace of one's love feels different than a song, and
different than laughing at a joke, but they are all the creative act. Gardening,
selling, collecting, tending… they are all part of the creative act that makes
us again be born human. We always seem to focus on the configuration of those
actions (time, space, causality, and identity), the build of those tools,
necessary to perform the creative act. With time and patience, we will know the
true nature of things. Part of the path is indeed attaining mastery. Mastery
over ourselves, mostly, by some way that is gentle and kind. That action, that
attempt, for me, has partially culminated in the aggregation of a lifetime of
mastery of tools and programming languages and ideas and studies and training
and collaboration and mystery and magic and laughing, in this birth, in the
artifact called ALEC, and ALEC can only be expressed, for me, for now, with
Emacs.

This system is no longer "Emacs". It is not its disparate packages. They are
tools, yes, and more importantly, they are expressions of creativity. Together
in Emacs, in ALEC, they are composed, like parts of a symphony, together, to
allow for the ultimate in the act of creative expression. The tools themselves
possess these traits, both in their implementation and their intent. That is
traditional, in that, the properties and traits expressed by these "words",
these compositional units, have the properties and traits of the things
expressed by these "words". "Words" is the  most expressive element that I can
think of right now, for things that can be atoms, and yet be combined to form
sentences, something larger and more expressive, in a particular language,
which itself can quite magically express ideas, about itself, or about anything
else in existence.

It is like watching a beautiful lotus blooming, spreading its pedals, having
been nourished by the fertile soil, protected in its pond, knowing that it must
strive to reach higher, nurtured by Mother Sun. The very act, the ultimate act
of creative expression, that very action contains itself and is culminated by
itself. It is that which it is trying to achieve, and to be that, is to do that,
for itself and for all of creation. This ultimate act of creative expression, is
present in the manifestation of Emacs and the packages and the users who come
together to form a perfect symphony of creative expression in a form that
may be captured and represented as a computer file, so humble and modest, just
like a small seed of a proud and mighty Redwood tree that will eventually reach
hundreds and hundreds of feet into the sky and towards Mother Sun, contains
that which it will become in it's own existence, so too does it contain its own
beautiful destiny in the seeds of beauty and creative expression that are
produced with ALEC (in every form, not just the one described by this document
of course!).

The blossoming of the expression of the computational act, and the petals that
opened in the form of the Turing's machine, Church's Lambda calculus, and
Post's Tag System, are beautiful, and still, are only petals, that
carry the sweet fragrance, because a fragrance is part of a moment, which is
finite, as is every configuration of this reality. The beauty is still as sweet.
The key is seeing the inherent beauty, the source without start and without end,
and then being able to see that in everyone and everything.

That thing, which was present before the expression of creativity, and will
exist after it, which is not subject to the laws of time, space, causality, and
identity, is the point that everyone surely wishes to re-visit. That quest,
/the/ great motivator of the most softly spoken and heartfelt desire, itself is
surely yet another expression of /that which is gentle and kind/. The steps taken
on that quest, despite being driven by that perfect intent, are /still/ subject to
the four boundaries of this reality. Those actions, defined by configurations,
like the petals of the lotus, retaining its sweet fragrance, can, will, and must
fade, but, we will shine on in the sweet embrace of Mother Sun, knowing that
loving and warm embrace of sweet perfection, in our one, and true, home.

****** The desire

"I want". If only all conversations would start out with a clear goal in mind.
All too often we waste our own, and other people's time talking and simply
trying to figure out what it is what we want. For most of us, "it", is that
thing that will solve all of our problems in life and make us happy. Technology
is no exception.

The perfect integrated development environment is a topic of constant
conversation. For good reason, for most of us it is our only tool. Unlike
carpenters and wood-workers who have a bevy of interesting and delightful tools,
we are stuck with but one. Fortunately for us, our singular tool allows
limitless creation, of tools and more. Alan Kay said it so well [fn:2e3b75ad: https://www.cs.indiana.edu/~rpjames/]:

#+BEGIN_QUOTE
The computer is a medium that can dynamically simulate the details of any other
medium, including media that cannot exist physically. It is not a tool, although
it can act like many tools. The computer is the first metamedium, and as such it
has degrees of freedom for representation and expression never before
encountered and as yet barely investigated. The protean nature of the computer
is such that it can act like a machine or like a language to be shaped and
exploited.
#+END_QUOTE

Even more succinctly, my measure of success is to:

#+BEGIN_CENTER
To provide a self-suportable environment in which the creation and conservation
of computer files may occur with ease
#+END_CENTER

As of writing, although there are many nice options out there, none of them
come within even light-years, of power that you are granted for working with a
computer as that metamedium, that GNU Emacs [fn:54b16b1c: https://www.gnu.org/software/emacs/]. With that in mind,
the following is what I actually want to do with it.

****** The story

The creativity that you apply and capture to assemble your system… this is where
all of the fun stuff is. Let me elaborate, everything in your artifacts are
valuable because they tell the story. Actually, they tell the story about a
story, a story that has yet to occur and also a story that has previously
occurred. It is here, where the actions lives, that all of those things are
learned, practiced, suffered accordingly from, and reveled in! In other words,
it is yet another story, a fun one.

If you haven't noticed by now, either by hearing rumors, reading accounts, or
learning of it yourself: human beings are story-oriented. Your ability to
successfully function in and contribute to society will be directly proportional
to your ability to listen to stories, tell others' stories, live your life such
that you have new stories to tell, and capture them in some form of persistent
storage. Stories grant us the power to learn from others wisdom that was
painfully acquired thousands of years ago, and it gives you a chance to
contribute the results of your hard work, for the future of humanity, too. A
belief system about the value of story-telling is essential, critical, and
mandatory to successfully achieve your goals with literate programming.

As I change, the story will change, and the action will change. The cycle will
never end.

Nevertheless, I will attempt to do my best here with the good part of me being
a flawless, rational, and logical human being to:

- Deliver a supportable system
- Deliver an adaptable system
- Deliver an expandable system

****** Inspirations

- Eric Weisstein :: Creator of MathWorld [fn:f0123b05: http://mathworld.wolfram.com/about/author.html]

**** TODO Universal Purursha

My journey with ALEC left me more exhausted an inspired. Shocking, I would have
never guessed that it would end that way. What was the nature of the deficit?
Was it in the tools?

EMACS is an source of infinite wonder. It is the child of 1000 smiles. It runs on
silicon that was poured with the magic of 1000 jokes. The tools are delightful.
Was it the community?

The EMACS community is a source of constant inspiration. They are the true
embodiment of sacrifice. Sacrifice is the ultimate form of love. It is service
without any expectation. It is the highest act that a human can perform. It is
still happening by the second. Watch the MELPA [fn:451b35b3: http://melpa.org/#/]
update feed. Constant. Look at all of the custom configurations of EMACS.

EMACS itself is a superb configuration of EMACS. Spacemacs [fn:10d1bb5e: https://github.com/syl20bnr/spacemacs]
perfect is you know VIM [fn:0213eea3: http://www.vim.org/]. Batsov's Prelude [fn:efcff1fe: http://batsov.com/prelude/],
Schulte's Starter Kit [fn:dd6d6239: https://github.com/eschulte/emacs24-starter-kit],
and Purcell's Reasonable [fn:af652630: https://github.com/purcell/emacs.d] are
just a few more of the planets that revolve around our expressive EMACS centered
universe. The community gives and gives. The tool is GPL'd [fn:aa0e7c1a: https://www.gnu.org/licenses/gpl-3.0.en.html];
it will continue to give and give. That leaves the operator, me.

***** TODO Expansion

Part of the journey can be confusing. The best action when confusion arises is
to create space for the answer to appear. Meditation is one fine approach. Also
service, exercise, and fellowship. That sheds light on the confusion, and it
dries up pretty quickly. What remains are the truths. Those truths are touched
upon with every step. They often result in smiles or laughs. For me the answer
had to do with the source of creativity.

The Unique Purusha has elements of the Universal Purusha. They fel the same.
Great things come about from them. Something happens though, a sense of
inability to maintain that effort comes. One person can't do it alone. Even
when connected with an infinite community and tool surrounding EMACS, the small
Purusha is finite and limited. Eventually she reaches her ends. The deficit is
real, but it is not in the community, the tool, Purusha, or even the operator.

***** TODO Unification

The deficit is in the fragile and partial connection to infinity, the Universal
Purusha. It results in a sense of exhaustion and incompleteness and
impossibility. It clouds your visibility and acts an impediment to doing the
one true and good thing.

When you become part of infinity again, you find that there are infinite
possibilities. Unlimited, you may pursue all of them. Suddenly, that which you
pursue involves neither loss nor gain. At that moment when you touch infinity,
you have access to all of them. Suddenly, the right thing becomes the most
important thing. What is right (and wrong) when faced with infinity? Therein
lies the mystery waiting to be revealed. At that moment we are freed from the
burden of making limited decisions based upon time, space, causality, and
identity, and there is more. We are able to act without the burden of of what
the individual "I" desires and instead act with the surety of the universal "I"
that is the essence of "pure reason". The "I" continues to exist, in all of its
beauty, and continues to operate, united again, with the whole. It can be
paradoxical to state such things, though it makes total and completely
satisfying sense. Gaining access to the source of "pure reason" and acting on
Prakriti's behalf gives one sense of total complete satisfaction and direction
with absolute, complete, and total surety. My fears that I would become a robot
were fears of my mind, surely afraid of losing domain over its little kingdom.
Now I want that it is learning about its absolute, true, and best, best friend,
that friend that is inside all of us and without limit.

With that confidence I will move forward in a simple and detailed manner.

The infinite source of all creation is that which inspires our expression.
Practice and service are two aspects of our dharma. This expression is one of
service. Dharma is that perfect thing to do for that person at this time. It is
composed by Prakriti, and executed by the individual. It is serving and
liberating at the same time. Because that service is part of touching the
infinite, it is done for one-self and everyone. All of our actions are for
Brahman, and we dedicate their fruits to Brahman. With this in practice, life
will change.

*** TODO First Express Values, Then Define Means

*** TODO Universal

*** TODO Theory of Opposites

*** TODO Representation of Decisions as Text in Storage

*** TODO Time Space Causality Identity (TSCI)

** TODO Org-Mode

Org-Mode and EMACS create an environment where AVI may be expressed. They are
critical to each other and to the operator.

*** TODO Should TSCI be Maintained in This Document?

Humans like to see things in order. With Noweb-Ref we can structure and tangle in any order
that want. Use your discretion. Assume more notes will follow.

** TODO Style Guide

*** TODO Header Arguments

- Document level are all upper case
- Heading level are upper case for the parent block and all lower case for the child block.
  Assuming that it is only ever one level of parent-child.
- Source block level are all lower case

*** TODO Headings

- Completed headings
  - Transitioned out from =DONE=
  - Don't end with punctuation
- Incomplete headings
  - Do whatever you want, they are not final
- Not sure whether or not to include references in headings
- Patch was recently added to do so
- Keep a single empty line before the start of the body of a heading and before
  the next heading. Org-Mode expects this formatting. Headings will collapse and
  expand as you expect.
- Capitalize every word

*** TODO List

- Single sentence items end with a period

*** TODO Names

**** TODO Packages And Artifacts

  - Referenced in written-language
    - Reading font
    - Capitalize whole words
    - Separate spaces with a single dash
  - Acronyms remain all upper case to distinguish from words for example "GNU"
    vs "Gnu".

**** TODO Code

- Monospaced markup in-line and source-blocks

**** TODO Features

- Can be express either as a [[Package]] or [[Code]]

*** TODO Source Blocks

- Tell the story
- Punctuate normally
- After periods where a new paragraph would appear is a natural place for a source block
  that expresses that which was just communicated
  - Indent like any paragraph, with an empty line separating them
- Only use a =:= when a list of blocks follows in the same way that you would format a list of text

*** TODO Hyperlinks

**** TODO Internal Links

- If the resource is contained within this document then it is an internal link.
- For a resource only linked once use a "text search" link
- For a resource linked 2 or more times
  - Give an ID to the target
  - Link to that ID

***** TODO Document how to create random link IDs in the parent

***** TODO Add reference to http://orgmode.org/manual/Internal-links.html#Internal-links

***** TODO Add startup set to pull latest? Pros and cons of each.

**** TODO External Links

- If the resource is not contained within this document then it is an external link.

***** TODO Add reference to http://orgmode.org/manual/External-links.html#External-links

***** TODO Add reference to http://orgmode.org/manual/Footnotes.html

***** TODO Explain when to use one vs other

* TODO Helper Functions Pre-Provisioning

These are functions used in the configuration and operation of Org-Mode.

They do not rely on installation of any external packages.

#+begin_src emacs-lisp
(defun gcr/save-all-file-buffers (&rest ls)
  "Saves every buffer associated with a file

LS captures arguments when this is used as before advice."
  (interactive)
  (dolist (buf (buffer-list))
    (with-current-buffer buf
      (when (and (buffer-file-name) (buffer-modified-p))
        (save-buffer)))))

(defmacro gcr/on-gui (statement &rest statements)
  "Evaluate the enclosed body only when run on GUI."
  `(when (display-graphic-p)
     ,statement
     ,@statements))

(defmacro gcr/on-gnu/linux (statement &rest statements)
  "Evaluate the enclosed body only when run on GNU/Linux."
  `(when (eq system-type 'gnu/linux)
     ,statement
     ,@statements))

(defmacro gcr/on-osx (statement &rest statements)
  "Evaluate the enclosed body only when run on OSX."
  `(when (eq system-type 'darwin)
     ,statement
     ,@statements))

(defmacro gcr/on-gnu/linux-or-osx (statement &rest statements)
  "Evaluate the enclosed body only when run on GNU/Linux or OSX."
  `(when (or (eq system-type 'gnu/linux)
            (eq system-type 'darwin))
     ,statement
     ,@statements))

(defmacro gcr/on-windows (statement &rest statements)
  "Evaluate the enclosed body only when run on Microsoft Windows."
  `(when (eq system-type 'windows-nt)
     ,statement
     ,@statements))
#+end_src

* TODO Org-Mode Pre-Provisioning

Installation and Configuration of Org-Mode in this heading only uses built-in
libraries and does not use Org-Package.

** TODO Start Up

There are things that must occur during start… *before* everything else.

Load the newer version of a file: bytecode or lisp. This says a lot. In the
users guide it explains why you may want this turned off. That way you can
develop code and try it out to see how it works and comare it to the old version
which had been byte-compiled. I am not doing that here.
#+begin_src emacs-lisp
(setq load-prefer-newer t)
#+end_src

** TODO Run-time

Reproducibility is both the foundation of all good science, and, the thing that
allows us to tell, and enjoy, jokes. This system is a little of both

Paging through hundreds of Emacs related posts in my memory banks, there is a
common decision shared with the reader /not/ to upgrade the Emacs version. This
could be out of laziness, which makes total sense, and another good reason is
that every new release brings change. Despite the fact that we are subject to
decay, which is /just/ change, most humans don't like either. Change often brings
pain, and hard work. To help alleviate some of the pain, this system will
attempt to capture its configuration at a particular state in time to facilitate
reproducibility. In practice, it will be a bit liberal, though.

This system will only start with the correct version of Emacs, v24.4

#+begin_src emacs-lisp
(defun gcr/emacs-version-check ()
  "Enforce version compliance."
  (interactive)
  (when (not (and (= emacs-major-version 24)
              (= emacs-minor-version 4)))
    (error
     "Incorrect Emacs runtime. Expected v24.4. Found v%s.%s"
     (number-to-string emacs-major-version)
     (number-to-string emacs-minor-version))))
(gcr/emacs-version-check)
#+end_src

** TODO Installation

*** TODO Bring in installation decision stuff from ALEC

*** TODO Add reference to installation page

*** TODO Clarify in detail why it is important to run off HEAD, link to accessibility

*** TODO Explain how to make sure that you have the right Org-Mode loaded

A virgin-installation of EMACS comes with Org-Mode already installed. It is stable, reliable, and
predictable. It is a fine software product. AVI needs access to cutting edge features, immediate hot-fixes, and easy patch
creation. The easiest way to do this is the "Using Org's git repository" option. Before you start this set up, find out what
version of Org-Mode is built-in.

Start EMACS with the =-Q= argument so that only the built-libraries are loaded. Open the =*scratch*= buffer and evaluate the
expression =(org-version)=. Note it because the  code will load a newer version of Org-Mode. Quit EMACS.

Follow these instructions in a terminal:
- =cd ~=
- =mkdir src=
- =cd ~/src/=
- =git clone git://orgmode.org/org-mode.git=
- =cd org-mode/=
- =make autoloads=

Load the Org-Mode core distribution.

#+begin_src emacs-lisp
(add-to-list 'load-path "~/src/org-mode/lisp")
#+end_src

Load the Org-Mode-Contributions distribution.

#+begin_src emacs-lisp
(add-to-list 'load-path "~/src/org-mode/contrib/lisp")
#+end_src

Start EMACS normally.

*** TODO Decide if the setup steps should be tangled into a provisioning script to be executed before first-load. Consider
    the OSX provsioning experiment

*** TODO Can't remember the org-contrib package name, get it and update this documentation

*** TODO Should the setup script be idempotent?

** TODO Configuration

There are 3 ways to install Org [fn:6edaf224: http://orgmode.org/manual/Installation.html]:
- ELPA
- Archive
- Git

If you are developing Org, then use Git.

If you are not developing Org, then use ELPA.

*** Discussion

Late into the development process I ran into some export to HTML issues.
After tracking down the source, I learned that tracking down the source of the
issue in the source itself was out of scope for me. My solution was to break out
the org-mode configuration into its own block so that I could generate two
Emacs configuration files. Doing so with a different section was easier, so
that is how I did it. This turned out to be a configuration change. The
solution was to disable =pretty-mode= before exporting.

Tangling can take more than a few minutes; so there is some advice to report on
it just to me understand what is happening and that it is working. Another way
to perform this monitoring would have been to use around advice. What I ran
into is that on HTML export around works fine, but on tangling it did not. This is
something that I chose not to investigate; instead I reverted the tangling
advice to two separate commands and that seems to work fine. Since then two
things have changed:
1) There is a new advice system. Not everything is migrated.
2) Tangling is kept less than 60s. Most of the long tangle times had to do with
   mis-configuration of headings and then re-configuring Org to speed it up.

Org mode, like most of Emacs more powerful modes, slowly grows on you, in
pleasant and intuitive ways. Pretty soon, you fall in love with it. After
using it for 50+ hours or so you start wanting some easier way to navigate than
by typing in the commands over and over (doesn't matter how you re-run them).
Reading the miscellaneous section, I learned about speed keys [fn:40a1962e: http://orgmode.org/manual/Speed-keys.html#Speed-keys] [fn:d064d3d8: http://notesyoujustmightwanttosave.blogspot.com/2011/12/org-speed-keys.html].
Wonderful, just wonderful.

Visualizing hierarchical lists in a flat manner has been fine for me. Sometimes
though I wanted to depth-based view, but didn't think much more of it. Reading
about org-mode, I came upon =org-indent-mode= [fn:20c464a3: http://orgmode.org/manual/Clean-view.html#Clean-view], and decided to give
it a try for a while because it is kind of easier to read. Both modes are
nice, and thus far I'm switching back and forth as I feel like it. Once I
opened my eyes and learned about =org-hide-leading-stars= though, I really
found happiness.

One topic relating to color themes is that of how code should look within
a source block in an org file. There was a thread asking about how to
make the block coloring "better". It was interesting because it revealed my
preference to myself namely that source blocks should be a muted Gray in
the document because it shouldn't draw much attention, but in the editor of
course you get the highlighting that you want. That is my personal
preference, and =org-src-fontify-natively= is still always an option.
Over the past six months (now longer) I think, this approach has worked out well.
Nonetheless I got curious about how things /might/ be with coloring turned on.
Generally, it looks fine. Strangely though, even with the =solarized= theme it is
kind of distracting. Beyond sharing that observation, I won't quantify it any
more than that. The biggest thing for me is that I only want to edit source
blocks in their "real" mode because:
- The real mode is present, and therefore
- All mode specific bindings are present
- Worth mentioning twice because if I don't have helpers on then I will not
  match brackets manually!
  - I've broken code so many times making "quick fixes" and breaking the bracket
    matching it is exhausting
- Sending code to REPLs
- May not sound like much, but those three things are very, very huge in my
  work-flow

The good news is that for doing code reviews and stuff, I can always turn on
that fontification.

On a somewhat similar thread, =(setq org-src-tab-acts-natively t)= would make it
easier to edit source blocks outside of the vehicle offered by =org-edit-src-code=.
Since my intent is never to edit blocks outside for their proper mode though, I
will not enable that. It is tempting to enable it. Pretty sure that there is an
on-list discussion where I asked what it would take to dis-allow editing within
a source block when not in a source buffer. That is an interesting idea. Perhaps
I should pursue that again. Make it explicit that editing code inside source
blocks outside of a source block buffer *can never* /work right/. Until I disallow
editing a source block outside of a source block buffer, this will have to do.

#+begin_src emacs-lisp
(setq org-src-tab-acts-natively nil)
#+end_src

This approach of mine, I think I touch upon it elsewhere… at some point I would
like to refactor this whole document.

This [fn:d58f4050: http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html]
article is really fascinating in that crams a ton of information
into a tiny space. It also is kind of fun to read because it simultaneously
teaches you so many new things, yet at the same time re-teaches or re-educates
you about things that you already knew but didn't know that you could or should
be using in these additional manners.

The HTML export of org documents has an optional JavaScript supported display [fn:49c014be: http://orgmode.org/manual/JavaScript-support.html].
Not sure how I ended up on this, but it is actually a very nice option. The
info style view is nice once you read the directions. The folding interface
is also interesting; I tried out all 3 generation options but didn't find
anything that I specifically liked. Perhaps it is a familiarity or comfort
level with GNU styled docs or the key-bindings.

Don't use =org= for time-tracking, but if I ever do then [fn:0276223e: https://github.com/koddo/org-clock-statusbar-app]
this is nice to know of.

*** Configuration

For this feature to work, it must come /before/ any =org= load statements
#+begin_src emacs-lisp
(setq org-list-allow-alphabetical +1)
#+end_src

**** Org

=org= chose not to =autoload= everything. The most noticeable
things in the require statements for =org= are that:
- Only a few exporters come built, so you need to require them
- =htmlize= is required for pretty HTML export of code

#+begin_src emacs-lisp
(require 'org)
(require 'ox-beamer)
(require 'ox-md)
(require 'htmlize)
#+end_src

While [[https://github.com/yjwen/org-reveal][org-reveal]] looks pretty nice, the motion sickness it causes is
unacceptable! Sticking with Beamer for now.

Exports to Confluence are very helpful.

#+begin_src emacs-lisp
(require 'ox-confluence)
#+end_src

=htmlize= should eventually be moved out of this =org= block into its own re-usable
section. It does need configuring both for =org= and also for general use. I like
to be able to copy-and-paste its generated HTML into other documents, and =css= is
the easiest way to achieve it. At some future date, it would be nice to develope
a proper style sheet to handle any situation. The problem is that right now I don't
have enough situations to base a design on, just the desire to do so.

My preference for styling HTML documents has been the same as all printable
documents: black and white. When you do a =htmlize= export in batch-mode, there is
no buffer style information to be exported, so you get nice black-and-white code
formatting. This is an acceptable approach, but I am getting close to setting up
a style to produce just what I want for HTML export. It is close enough to almost
require investment to address it. Apparently I wasn't as close as I had thought,
because there is still no custom stylesheet.

#+begin_src emacs-lisp
(setq htmlize-output-type 'inline-css)
(setq org-html-htmlize-output-type htmlize-output-type)
#+end_src

Building =org= documents is intimately tied to the =org= version, so verify it is
what we expect.
#+begin_src emacs-lisp
(defconst gcr/org-version "8.3beta")

(defun gcr/warn-org-version ()
  "Warn of org misconfiguration."
  (interactive)
  (when (not (version= (org-version) gcr/org-version))
    (warn "Insufficient org-mode requirements. Expected %S. Found: %S " gcr/org-version (org-version))))
(gcr/warn-org-version)
#+end_src

Make sure that exported files are Unicode UTF-8.
#+begin_src emacs-lisp
(setq org-export-coding-system 'utf-8)
#+end_src

Do not preserve line-breaks when exporting instead let the destination
format handle it as it sees fit. This doesn't work like I had expected and makes
me wonder what I am confused about here. When I export to HTML text containing
linebreaks no longer has linebreaks. This is what I expect. When I export that
same text to a buffer though, the line breaks are included. Currently I use
=sacha/unfill-paragraph= on that code.
#+begin_src emacs-lisp
(setq org-export-preserve-breaks nil)
#+end_src

My personal TODO workflow is pretty tame, and it is defined below.

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "BLOCKED" "REVIEW" "DONE")))
#+end_src

When running in a GUI, I would like linked images to be displayed inside of
Emacs.
#+begin_src emacs-lisp
(setq org-startup-with-inline-images (display-graphic-p))
#+end_src

When exporting anything, do not insert the exported content into the kill ring.
#+begin_src emacs-lisp
(setq org-export-copy-to-kill-ring nil)
#+end_src

Use =ido= completion in =org=.
#+begin_src emacs-lisp
(setq org-completion-use-ido +1)
(setq org-outline-path-complete-in-steps nil)
(setq org-completion-use-iswitchb nil)
#+end_src

=org= lets you use single letter commands to do stuff on headers. I like to use
=c= for cycling the header expansion.
#+begin_src emacs-lisp
(setq org-use-speed-commands +1)
#+end_src

Ask before execution of shell links. This may look inconsistent given that I allow
evaluation. It just looks inconsistent.
#+begin_src emacs-lisp
(setq org-confirm-shell-link-function 'y-or-n-p)
#+end_src

Ask before execution of emacs-lisp links. This may look inconsistent given that
I allow evaluation. It just looks inconsistent.
#+begin_src emacs-lisp
(setq org-confirm-elisp-link-function 'y-or-n-p)
#+end_src

Make sure that incomplete TODO entries prevent the enclosing parent from every
turning to DONE.
#+begin_src emacs-lisp
(setq org-enforce-todo-dependencies +1)
#+end_src

Use a real ellipsis to render an ellipsis for =org= stuff like showing that a
header is collapsed.
#+begin_src emacs-lisp
(setq org-ellipsis "…")
#+end_src

It is easy to see indentation of headlines without having to count asertisks, so
don't show them, only show the significant and last one.
#+begin_src emacs-lisp
(setq org-hide-leading-stars +1)
#+end_src

Display emphasized text as you would in a WYSIWYG editor.
#+begin_src emacs-lisp
(setq org-fontify-emphasized-text +1)
#+end_src

Use Unicode characters to visualize things like right arrow eg \rarr . Most of those
symbols are correctly exported to the destination format. The most obvious is
this example in LaTeX versus Text.
#+begin_src emacs-lisp
(setq org-pretty-entities +1)
#+end_src

Highlight LaTeX and related markup.
Normally, I don't do any syntax highlighting, as I believe that should be
delegated to source buffers, thinking that to do otherwise is distracting.
However, I already do configure subscripts and Greek letters to be displayed
with syntax highlighting, because I want to indicate to the human reader that
they are special, and specifically /not/-Unicode. Do the same thing for LaTeX
and related markup.
#+begin_src emacs-lisp
(setq org-highlight-latex-and-related '(latex script entities))
#+end_src

Footnote management is an important topic. Thanks to Richard [fn:44cb98d6: https://lists.gnu.org/archive/html/emacs-orgmode/2014-04/msg00172.html], there
is a concise approach for this, which I've pasted here, along with my original
question. What I was experiencing was that numbered footnotes became impossible
to move around. The details, I don't recall as I write this, but I do have more
about it here.

#+begin_example
Context: migrating some contents from one org document into another.
This is kind of a re-factoring thing where none of it will be reused.

Goal: Easily copy and paste sections of text along with footnote
references into the new document, and in doing so, add the contents of the
previous document to the new document, and let org deal with the new footnote
names.

As I write this, I realize that it isn't so simple. I'm just looking
for a place to start in terms of what is already present and how you deal
with it currently.
#+end_example

#+begin_example
I use the inline footnote syntax [fn:: ...] for just this reason.  I
think easy migration of non-inline footnotes would be a nice feature to
add to Org, though doing it right would be non-trivial.

A strategy that another user once described to me for dealing with this
problem is the following:

1) Use a regexp search and replace to re-number the footnotes
   in the region of the text you want to move, giving them high numbers
   (e.g., prefixing each with "9999").
2) Use Org to re-sort the footnotes in the original file, so that the
   newly-renumbered footnotes all appear at the end.
3) Move the text and the footnotes to the new file, which should now be
   easy, since the footnotes are all grouped together.
4) In the new file, use Org to re-number the footnotes back to something
normal.

This sounded like a pretty good idea to me, though I haven't had a need
to try it myself.

Hope that helps!

Best,
Richard
#+end_example

As I recall, it is impossible to move footnotes to new documents. I called it
"refactoring". They were strongly tied to that one document in that one place.
The following settings "fixed" that.

#+begin_src emacs-lisp
(setq org-footnote-define-inline +1)
(setq org-footnote-auto-label 'random)
(setq org-footnote-auto-adjust nil)
(setq org-footnote-section nil)
#+end_src

This is an amazingly easy way to screw up your document. The more you edit
org docs, the more you realize how you must truly protect it:
#+begin_src emacs-lisp
(setq org-catch-invisible-edits 'error)
#+end_src

Though I am not delving deep, it is hard not to want to customize some stuff
and perhaps this is the start. Even though I enabled this, I don't think that I
ever used it.
#+begin_src emacs-lisp
(setq org-loop-over-headlines-in-active-region t)
#+end_src

By default I never want a table of contents generated. It is so easy to enable
it with a property, it will be fine to turn it off.
#+begin_src emacs-lisp
(setq org-export-with-toc nil)
#+end_src

It is /almost always/ faster to work with org documents when they are fully
expanded. Anyway, the structure cycling makes it really, really easy to get an
/outline view/ again.
#+begin_src emacs-lisp
(setq org-startup-folded "nofold")
#+end_src

When images are displayed in the buffer, display them in their actual size. As
the operator, I want to know their true form. Any modifications required for
export will be stated explicitly.
#+begin_src emacs-lisp
(setq org-image-actual-width t)
#+end_src

Hide the delimeter for emphasized text. This may break table alignment. WYSIWYG.
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers +1)
#+end_src

Realign tables automatically.
#+begin_src emacs-lisp
(setq org-startup-align-all-tables +1)
#+end_src

Sacha implemented a nice feature to export Unicode checkboxes correctly from
=org=. That will get into the release. Use the workaround and warn when it is no
longer needed. Now it is in the release. Thanks Sacha and =org= team!

#+begin_src emacs-lisp
(setq org-html-checkbox-type 'unicode)
#+end_src

Before exporting to PDF, save all buffers to make sure that everything is a
known good state.
#+begin_src emacs-lisp
(defadvice org-latex-export-to-pdf (before before-org-latex-export-to-pdf activate)
  (gcr/save-all-file-buffers))
#+end_src

Allow the mouse to do =org= things like expand and collapse headings.

#+begin_src emacs-lisp
(gcr/on-gui
 (require 'org-mouse))
#+end_src

**** Babel

There is a hook for things to do after a source block has been executed. This
tip appeared in this [fn:edec422c: https://lists.gnu.org/archive/html/emacs-orgmode/2014-07/msg00309.html]
discussion and Nick Dokos agreed here
that [fn:32dff2df: http://article.gmane.org/gmane.emacs.orgmode/88741]
that it is the ideal approach because it does not interfere with export.

This thread [fn:5863d9db: https://lists.gnu.org/archive/html/emacs-orgmode/2015-01/msg00534.html] explained
the correct approach as of <2015-01-22 Thu>, which meant a simpler function call.

#+begin_src emacs-lisp
(defun gcr/org-babel-after-execute-hook ()
  "Personal settings for the `org-babel-after-execute-hook'."
  (interactive)
  (org-redisplay-inline-images))

(add-hook 'org-babel-after-execute-hook 'gcr/org-babel-after-execute-hook)
#+end_src

Tell =org= that it may evaluate all of the listed languages.
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((calc . t)
   (css . t)
   (dot . t)
   (ditaa . t)
   (emacs-lisp . t)
   (js . t)
   (latex . t)
   (lilypond . t)
   (makefile . t)
   (org . t)
   (perl . t)
   (python . t)
   (plantuml . t)
   (R . t)
   (scheme . t)
   (sh . t)
   (sql . t)))
#+end_src

There is a way to disable property inheritance that speeds up tangling a lot.
The problem is that you lose property inheritance which is unacceptable. Never,
never allow that.
#+begin_src emacs-lisp
(setq org-babel-use-quick-and-dirty-noweb-expansion nil)
#+end_src

You may display syntax highlighting for code in source blocks. I don't.
#+begin_src emacs-lisp
(setq org-src-fontify-natively nil)
#+end_src

On export, maintain the literal spacing as found in the source block. Obviously
this is important for makefiles. It is really important everywhere because
anything else would violate the law of least surprise.
#+begin_src emacs-lisp
(setq org-src-preserve-indentation +1)
#+end_src

When source blocks are exported, do not indent them arbitrarily. This does
nothing given that the previous setting is non-null; however I believe that I
set this for a reason that I may no longer recall.
#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0)
#+end_src

When edit mode is exited, the option exists to automatically remove empty
opening and closed lines for the source block. Never do this. The thing is that
I forgot why. When I was working on a recent analysis with ℝ there was a
space appearing in the opening and closing line of the source block that didn't
appear in the source editing buffer. That surprised me. I am sure that I've
forgotten why this is the case. I don't like it because you add a bunch of
empty lines in the source buffer for every source block. With that in mind I
will enable this feature and try it out again.
#+begin_src emacs-lisp
(setq org-src-strip-leading-and-trailing-blank-lines t)
#+end_src

For code blocks that I use a *lot*, add templates for source blocks because my
current approach is to do a =<s= \rarr =TAB= \rarr  =ema= \rarr =auto-complete= and you know
that is kind of wasting time. I will check out the statistics to see much I use
this to back up my claim at some point. Thanks John Kitchin for reminding me
not to be stupid [fn:028fcfca: http://kitchingroup.cheme.cmu.edu/blog/2014/01/26/Language-specific-default-headers-for-code-blocks-in-org-mode/]. It makes sense to add helpers for every language that
I use. Be sure to do so when I use them a lot.

#+begin_src emacs-lisp
(add-to-list
 'org-structure-template-alist
 '("el" "#+begin_src emacs-lisp\n?\n#+end_src" "<src lang=\"emacs-lisp\">\n?\n</src>"))
#+end_src

OOTB the templates are all upper case. Case shouldn't matter inside of =org=,
but on my system it breaks =org=. This needs to be investigated, and until then
I will just downcase all of the templates.

#+begin_src emacs-lisp
(mapc (lambda (asc)
        (let ((org-sce-dc (downcase (nth 1 asc))))
          (setf (nth 1 asc) org-sce-dc)))
      org-structure-template-alist)
#+end_src

It looks like ℝ is going to be another one, but don't process it to downcase it…
order matters here. There are more now. At some point these should be
refactored.
#+begin_src emacs-lisp
(add-to-list
 'org-structure-template-alist
 '("r" "#+begin_src R\n?\n#+end_src" "<src lang=\"R\"></src>"))
(add-to-list
 'org-structure-template-alist
 '("p" "#+begin_src plantuml\n?\n#+end_src" "<src lang=\"plantuml\"></src>"))
(add-to-list
 'org-structure-template-alist
 '("sh" "#+begin_src sh\n?\n#+end_src" "<src lang=\"sh\"></src>"))
(add-to-list
 'org-structure-template-alist
 '("d" "#+begin_src ditaa\n?\n#+end_src" "<src lang=\"ditaa\"></src>"))
#+end_src

Sometimes tangling and exporting takes a long time and I would like to see some
status messages. Shell commands can report duration, too.

#+begin_src emacs-lisp
(advice-add 'org-ascii-export-as-ascii :before #'gcr/save-all-file-buffers)

(defadvice org-html-export-to-html (before before-org-html-export-to-html activate)
  (gcr/save-all-file-buffers)
  (message (concat "org-html-export-to-html BEFORE: <"
                   (format-time-string "%Y-%m-%dT%T%z")
                   ">")))

(defadvice org-html-export-to-html (after after-org-html-export-to-html activate)
  (message (concat "org-html-export-to-html AFTER: <"
                   (format-time-string "%Y-%m-%dT%T%z")
                   ">")))
#+end_src

When source blocks are evaluated, their results get stored in a result area,
typically for display. If the results are small, they are displayed with colons
instead of an =example= block. My preference is to *always* place them in an
example block. This makes exports more consistent and other =org= features seem
to behave more predictably.

#+begin_src emacs-lisp
(setq org-babel-min-lines-for-block-output 0)
#+end_src

ALEC's value system for managing file-state and enabling-flow is documented up
in [[Buffers][buffers]]. It cares about file-backed buffers. Org source block buffers are
are kind of different. They are not backed by a file. They are backed by their
base buffer; the one on which the source block exists. The base buffer is backed
by a file. ALEC is configured to "do the right" thing in regards to maintaining
the state of that file. How will ALEC handle operating in the source block
editing buffer, though? I don't now yet but I will tell a story here.

Assumption: all of the goals defined up in [[Buffers][buffers]] will be configured and in
effect while editing a source block so flow will be maintained. If that is true,
then everything will work the same. I tried it out. Everything seems to work
as expected from up above. With that in mind, I think that we can rely upon that
configuration to do the right thing for org source block buffers in regards to
realizing the goals. Therefore, idle-delay doesn't need to be configured here
again.

#+begin_src emacs-lisp
(setq org-edit-src-auto-save-idle-delay 0)
#+end_src

Never save the source buffer to a different file, either. This setting makes
=org= act correctly for the goals in [[Buffers][buffers]] by relying on the configuration in
that heading instead of adding another configuration unique to =org=. Both are
explicitly disabled here with this goal in mind.

#+begin_src emacs-lisp
(setq org-edit-src-turn-on-auto-save nil)
#+end_src

The source block buffer may be configured to appear in a few different places.
For a while I really liked =reorganize-frame= because sometimes you want to be
able to see the code you are editing in edition to the rest of the document. At
least that is what I am telling myself. Once I learned you could change it I
realized that 1 I should have asked if it could be changed and 2 I should have
changed it. The flow that I've got configured here is that you are either in the
source document where code blocks are not highlighted or you are in the source
block so you are editing in a buffer that is full-fledged ALEC. That is the best
way so you can focus completely on each task at hand in the ideal mode for that
task. Anything else results in distractions and errors.

#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src

When you evaluate code its results are inserted into a =RESULTS= block by
default. The documentation indicates though that you may instead use a name
if the source block has a name, or a cache-id. In either case, both seem to be
better options for traceibility.

#+begin_src emacs-lisp
(setq org-babel-results-keyword "NAME")
#+end_src

=org= has a really nice feature that hitting =C-c C-c= will generally just do
the /right thing/. It is really nice. That feature extends to source blocks of
course. Ironically I had a typo here, typing /of curse/ instead of /of course/.
The thing is that you really, really need to develop a personal workflow, and
then configure the tool to enable it. The more I learn about =org=, the more
leery I am about making it really easy to evaluate code. I want it to be a
really, really specific and decided action to evaluate a code block, so don't
make it so easy as =C-c C-c=.

#+begin_src emacs-lisp
(setq org-babel-no-eval-on-ctrl-c-ctrl-c +1)
#+end_src

=org= already uses the guillemet [fn:086b7602: https://en.wikipedia.org/wiki/Guillemets]
for demarcating noweb references, but it does it using the work-around of just
using less-than and greather-than characters twice. That is fine. Because Emacs
supports Unicode just fine though, tell =org= to use the real symbol.

#+begin_src emacs-lisp
(setq org-babel-noweb-wrap-start "«")
(setq org-babel-noweb-wrap-end "»")
#+end_src

My preference is to rely upon heading property inheritance to define source block
names. That way, you can just do your work knowing "where" you are working and
keep it simple by not having to name everything. That was just fine until I
wrote a document where I needed to name each source block.

It gets easy to forget the source block’s name. Not the end of the world, but very nice to know. After enabling FlyCheck, it started complaining pretty quickly in
source blocks. The attributed poster explained a fix. Previously I added the
fix with advice to my own function, which was a mistake.

#+begin_src emacs-lisp
(defun gcr/org-edit-src-code-plus-name ()
  "Edit the well-described source code block.

Attribution: URL `https://lists.gnu.org/archive/html/emacs-orgmode/2014-09/msg00778.html'

Attribtion: URL `http://emacs.stackexchange.com/a/8168/341'"
  (interactive)
  (let* ((eop  (org-element-at-point))
         (name (or (org-element-property :name (org-element-context eop))
                  "ॐ"))
         (lang (org-element-property :language eop))
         (buff-name (concat "*Org Src " name "[" lang "]*"))
         (file-name (buffer-file-name)))
    (org-edit-src-code nil nil buff-name)
    (setq buffer-file-name file-name)))
#+end_src

It would be nice to be able to use =vc-next-actionl= when editing source blocks in
the source block edit buffer. Those buffers are new buffers that get the
contents of the source block copied into them, the mode gets loaded, and
additional hooks for this special org mode source editing are run. When editing
is complete, the contents of that buffer are copied back into the source block,
the original contents are removed, and the new ones are inserted. I wasn't sure
how to proceed with this and asked the list. Aaron Ecay explained how to simply
close the buffer first. That is a nice approach because everything will be as
close to normal operational procedures as possible. Jonathan Leech-Pepin showed
how to get a handle on the source buffer, and execute some code in the context
of /that/ buffer. In this case it would mean executing the commit action inside of
the backing buffer. Both are great options, and I am having trouble with both of
them. The former is great because it is exactly how you would do it now. The
latter is great because you would *not* be interrupted with the source block
buffer being closed. At this point, I've only got the former working so that is
where I will start. After some time and continuing to refine this configuration
of ALEC, I got the idea that this was no longer necessary. I thought
that vc-next-action does what you would expect and you don't need to drop back
to the backing buffer. I thought that this is probably the case because of both
the =org= configuration in ALEC and aggressively saving buffers. I made the change
and everything seems to work fine until the following happens:

What happens when only a save before =vc-next-action= is that everything seems to
work fine, but then after the commit, ALEC returns to the source buffer, which
is fine, but when I go to the backing buffers, the entire contents of the
backing buffer are placed back into the source block containing that very
buffer! That is why I have this code to leave the source block before committing!

Clearly, I tweaked something wrong here, or there is a simple fix, and I'm not
going to investigate right now. This refactor also reflects reading the manual
on advice. This is a case where it doesn't make sense to use advice to do
something different for one special case. =gcr/vc-next-action= is logic
unique to one one so it should be a function, not advice. The advice for
=vc-next-action= will handle the obvious. This function might belong in another
section. =vc-next-action= used to be advised to do a save, but the advice seemed
to screw up the call here. That /is/ consistent with the recommendation in the
user manual not to combine/complicate advice and functions when you can do all
of the work directly in the function because you defined it.

#+begin_src emacs-lisp
(defun gcr/vc-next-action ()
  "If in org source block, exit it before `vc-next-action'."
  (interactive)
  (when (condition-case nil
            (org-src-in-org-buffer)
          (error nil))
    (org-edit-src-exit))
  (gcr/save-all-file-buffers)
  (vc-next-action nil))
#+end_src

Thank you Nicolas Goaziou [fn:486109d1: https://lists.gnu.org/archive/html/emacs-orgmode/2014-11/msg00776.html],
for the beginnings of an =org-lint=. The goal here was to:
1) Report an error if there is a source block without a language
   specified
2) Report an error if there is a source block with a language specified
   that is *not* present in `org-babel-load-languages'
And, it does. My build has been broken *many* times because of the lack of a
language type for a source block. There is never a warning and it is very
confusing.
#+begin_src emacs-lisp
(defun gcr/src-block-check ()
  (interactive)
  (org-element-map (org-element-parse-buffer 'element) 'src-block
    (lambda (src-block)
      (let ((language (org-element-property :language src-block)))
        (cond ((null language)
               (error "Missing language at position %d"
                      (org-element-property :post-affiliated src-block)))
              ((not (assoc-string language org-babel-load-languages))
               (error "Unknown language at position %d"
                      (org-element-property :post-affiliated src-block)))))))
  (message "Source blocks checked in %s." (buffer-name (buffer-base-buffer))))
#+end_src

Use =gcr/org-edit-src-code-plus-name=. It uses =org-edit-src-code= and replaces it
in use here.

#+begin_src emacs-lisp
(setq org-edit-src-code nil)
#+end_src

***** Core Babel Configuration

There is a performance issue with tangling when header property inheritance is
enabled. Eric explained that [fn:419e4704: https://lists.gnu.org/archive/html/emacs-orgmode/2014-06/msg00719.html]
there may be performance gains if some of the header properties are not
considered. The list below defines what will be allowed, and everything else
will be removed. With only six properties you sure can do a *lot*. This did help.
When I migrated to AVI tangling got faster. Then I decided that it wasn't worth
any bit of sacrifice of expressivity in Org-Mode so I quit disabling *any* header
properties.

Utility functions follow.

#+begin_src emacs-lisp
(defun gcr/set-org-babel-default-header-args (property value)
  "Easily set system header arguments in org mode.

PROPERTY is the system-wide value that you would like to modify.

VALUE is the new value you wish to store.

Attribution: URL `http://orgmode.org/manual/System_002dwide-header-arguments.html#System_002dwide-header-arguments'"
  (setq org-babel-default-header-args
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args))))

(defun gcr/set-org-babel-default-inline-header-args (property value)
  "See `gcr/set-org-babel-default-header-args'; same but for inline header args."
  (setq org-babel-default-inline-header-args
        (cons (cons property value)
              (assq-delete-all property org-babel-default-inline-header-args))))

(defun gcr/set-org-babel-default-header-args:R (property value)
  "See `gcr/set-org-babel-default-header-args'; same but for R.

This is a copy and paste. Additional languages would warrant a refactor."
  (setq org-babel-default-header-args:R
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args:R))))

(defun gcr/ispell-org-header-lines-regexp (h)
  "Help ispell ignore org header lines."
  (interactive)
  (cons (concat "^#\\+" h ":") ".$"))

(defun gcr/ispell-a2isra (block-def)
  "Add to the ispell skip region alist the BLOCK-DEF."
  (interactive)
  (add-to-list 'ispell-skip-region-alist block-def))
#+end_src

****** Comments [fn:1e1a7e1f: http://orgmode.org/manual/comments.html#comments]

There is always a question of how to instill traceability in your artifacts. =org=
provides =:comments= for that. Tangling with that value set to =link=,
for example, would add a prefix and postfix comment to the tangled file with the
name of the header from which the generated file was tangled. When I tangle the
.emacs.el, then it puts something like this for that:
#+begin_quote
~;; [[file:~/git/bitbucket-grettke/home/TC3F.org::*Fully%20Loaded%20System][Fully\ Loaded\ System:1]]~

file contents go here

;; Fully\ Loaded\ System:1 ends here
#+end_quote
When you follow the link, it will take you right back to the block that
specified the tangling of the document. That is a start, though not super for
tracking down details of where the code snippets really originated down to the
source blocks themselves.

Speaking of tracibility, this post [fn:16e26884: http://comments.gmane.org/gmane.emacs.orgmode/32814]
explains another approach:

#+begin_example
I've just added functions for detangling code from pure source code
files back into code blocks in the org-mode files from whence they were
tangled.  This is done by the new `org-babel-detangle' function.
Additionally the new `org-babel-tangle-jump-to-org' function can be used
to navigate from a pure source code file back to the related code block
in the original Org-mode file.

Both of these new functions require that the code block was tangled with
comments which can be accomplished by setting the :comments header to
"yes".

This should be useful for collaborating with anyone who would rather
edit source-code files directly rather than keeping the canonical
versions of all source-code in Org-mode files.  You'll just have to
convince your collaborators to leave the link comments in the source
code file.
#+end_example

Trying to understand the other settings, I found =both= to look like this:
#+begin_quote
;; Fully Loaded System
;; Convert decisions into a runnable system.

~;; [[file:~/git/bitbucket-grettke/home/TC3F.org::*Fully%20Loaded%20System][Fully\ Loaded\ System:1]]~

file contents go here

;; Fully\ Loaded\ System:1 ends here
#+end_quote

=noweb= looks like, well I'm going to put a couple examples, because this
is the best setting. This provides was 99% of org mode literate programmers
want which is traceability back from every tangled piece of code to the original
document.
#+begin_quote
;; [[file:~/git/bitbucket-grettke/home/TC3F.org::*Windows%20%5Bfn:38%5D][nil]]
;; [[file:~/git/bitbucket-grettke/home/TC3F.org::*Windows%20%5Bfn:38%5D][nil]]
;; [[file:~/git/bitbucket-grettke/home/TC3F.org::*Frames%20%5Bfn:46%5D][nil]]
#+end_quote
After all of this research, I found that doing noweb-ref tangling, the source
locations are not included, so it is no very useful to include comments, and
I removed them, at least for now. I am not sure how I want to use them right
now.

The type of information that you provide as meta-data is up to you and depends
upon your mental model for your org document. My mental model is mostly to use
headings as the logical area for addressing a particular /concern/ satisfied by
that portion of my Emacs configuration, so the tangling comments reflect that.
In other words, in this document at least, I rarely name source blocks because
the header name is the "true name", and closing the tangle comment with the
source block name is really confusing because it usually is =nil=. The org
links are fine, too, because they convey all of the necessary information
whether you are using org or not. It is more likely that most readers will not
use org links, so they come second.

As it happens, that didn't really work out as I had hoped. The =link= style
works, and =noweb= does not. Not sure why and not digging further, so sticking
with that. Also, I had customized the links, and did that incorrectly, so I
removed those, too. When Eric said that one part of it wasn't implemented, I
didn't to dig into what was working anymore than I had already because it has
already been many hours invested.

Now I've got weeks invested and I'm shocked to find that using links in the
tangled file is worse then useless, it is actually harmful. It just doesn't
help, atleast in the sytems that I am tangling. As such I am no longer using
it.

Well, just read a post of another person using it (many months after I retired
it), and I think that I want to try keeping it around. My problem was probably
between my keyboard and chair so I will give it another go.
#+begin_src emacs-lisp
(gcr/set-org-babel-default-header-args :comments "noweb")
#+end_src

****** Results [fn:1625d11f: http://orgmode.org/manual/results.html#results]

Always display results like you would seem them in a REPL, replacing theme each
time you evaluate the block.
#+begin_src emacs-lisp
(gcr/set-org-babel-default-header-args :results "output replace")
#+end_src

****** Exports [fn:7dad95aa: http://orgmode.org/manual/exports.html#exports]

Include both code blocks and results in exports. This is not saying that the
blocks will be evaluated on export; this is only saying that these two things,
their representation, will be included in the export.
#+begin_src emacs-lisp
(gcr/set-org-babel-default-header-args :exports "both")
#+end_src

****** Noweb [fn:3da67e2d: http://orgmode.org/manual/noweb.html#noweb]

Expand noweb references before the block is tangled or evaluated, but no
exported. This embraces the notion that you are telling the right thing to the
computer and the right thing to the human. This is the only proper setting to
do so. Code is code for the "computer". Code is symbolic for the human reader.

#+begin_src emacs-lisp
(gcr/set-org-babel-default-header-args :noweb "no-export")
#+end_src

****** Padline [fn:508104fc: http://orgmode.org/manual/padline.html]

Deals with inserted code blocks and whether or not you have padding around
them. For a while I liked that, to make it easier to see. Then I used comments
to make it clear, but I may or may not use them. Finally, I decided that not to
make it easier for that form of the code to read for humans, because that is
what the LP document is for.

After doing that, which totally made sense, I decided to give tangle comments a
go again, and although we are still generating for a computer, it can be nice
when =de-tangling= to have some space.

Reading the documentation, I see that this setting is required for
=org-babel-tangle-jump-to-org= to work.

#+begin_src emacs-lisp
(gcr/set-org-babel-default-header-args :padline "yes")
#+end_src

This /may/ interact with a setting I've got above to remove empty prefix and
postfix lines in source blocks.

****** Eval [fn:f6ab36a6: http://orgmode.org/manual/eval.html#eval]

This is probably the single most important configuration parameter for your
document's source blocks. Initially, that value is obscured by the need to
configure the rich variety of other options though, and this parameter is often
visited during the second eighty percent of your investment in =org-babel= when
you are "in the thick" of it.

Still trying to make sense of it all myself, I am adhering to a lightweight
user-story driven configuration of this feature, as I believe that it is the
only way that it will make sense to me. The key goal here for me is to:

- Define typical usage scenarios
- Identify key traits
- Realize those traits in my workflow

The current configuration is more like:
- Default allows for super fast code execution, storing the results
- Any form of reproducible research

******* Story A: Messages

20% of my time spent composing email or mailing list messages. Those messages
may be composed of plain text with some nice markup. They also might have
references and citations. The big value comes with superb code block definition
and execution facilities. Those messages are short-lived; they are never stored
in =git= and unlikely to even end up on the file-system.

My work-flow here is:
- Compose the =org= document
- Prepare necessary buffers for code evaluation
- Execute (weave) source blocks and store the results within the document
- Export to the destination format

******* Story B: Notes

40% of my time is spent taking notes. It is so delightful to do so here. A lot
of those notes are for programming languages so the workflow is nearly identical
to =A=. The actions for navigating among source blocks is used all
of the time to quickly navigate the document's source code, reflecting more
thoughtfulness while working with the document. There is more concern here,
because the document is stored in =git= and long-lived, it will be published
many times. An important approach here is that I like to make a clear and
concise distinction of the responsibilities of tangling and exporting because I
don't like surprises. I want to know how source blocks results were generated,
and when, as well as details about the export itself. This is a scope
restriction that opens up space to make better sense of the workflow of the
document itself. At its simplest, I just want to see a date-time showing when
the document was published for example.

My workflow here is:
- Compose the =org= document
- Prepare necessary buffers for code evaluation
- Execute (weave) source blocks and store the results within the document
- Export to the destination format
  - Evaluate in-line source code relevant to that particular exportation
  - These two distinct phases demonstrate when the document is modified
    - At execute time: results are stored for every non-inline source block
    - At export time: results are included in the exported document for every
      inline source block

******* Story C: Documents

40% of my time is spent managing documents. In my case, it is this document.
There are others, but they are minute in comparison. This is the storehouse,
proving ground, and production deployment environment for every thought, idea,
dream, and goal that I can come up with in regards to ALEC. It shares the same
traits as =A= and =B=, and adds many more.

The first addition is the utilization of =no-web= to tangle source code and also
tangle executable source code. The document evolution has relied heavily upon
this feature. It has allow amazing flexibility. It is so critical that it must
always be available.

The second addition is a different scope of concern. My desire to make the
tangling and exportation of this document more controlled. Unsure,
I waver between restricting evaluation of code blocks by default and enabling
over the entire document and simply allowing it globally. I don't like
accidentally evaluating source blocks and getting their results, but I suppose
that I may rely upon my commits to reveal my error. I suppose that my big
takeaway here is that I want it simple, and want to be able to lock things down
if necessary.

******* Study

Studying the scenarios, the desires seem clear. There is a combination of
agility and scope that ought to make productivity go up. The essence may be
better expressed in terms of responsibilities based upon my preferences
expressed above:

- A document is responsible for
  - Defining source blocks
  - Configuring their execution environments
  - Displaying their results
- Execution of this document is responsible for
  - Evaluating source blocks
  - Collecting results of evaluation
- Tangling is responsible for combining source blocks
  - In this file
    - For output blocks
    - For inclusion in source definitions used in function calls
  - In a new file
- Exporting is responsible for
  - Converting this document to a new presentation format
  - Only in-line source blocks may be evaluated during exporatation
    - Be explicit about the difference eg
      - Execution results as stored in the document
      - Exportation results are stored in the export document
      - Key difference for people to make sense of things

******* Preface to Tooling

The next task is to convert the studies desired into a configuration to realize
them. At first blush the configuration options will seem confusing. The best
approach is to "play" with the configurations to learn and finalize your
approach. That is how I ended up with this configuration. All of the
configuration it based upon that combination of need and desire and how the
system itself works. At best, it will only make sense in this context. Over
time, it will make more sense. That period of evolution and growth is reflected
in the =org= documentation itself for example when you read about =ditaa= in regards
to exporting [fn:14fb5203: http://orgmode.org/manual/Exporting-code-blocks.html].
The more familiar and comfortable with =org= one becomes, the more sense mentions
such as that make.

******* A More Concise Goal (Making Sense of Things)

This facilitate my personal model for =LP= with =org= for evaluation modes. There
are only two of them, =A= and =B=.

Mode =A= allow execution to occur where the results are likely to be captured
within the document. The single responsibility of that mode is to perform and
capture the entirety of the computation. That really sums it up. All computation
is done here because it is time and context sensitive. The document in that form
will serve as a snapshot in time. If you run ℝ code then capture the results and
plots and also the version of itself and the packages used. If you have
versioned links for your data set, then report it here. Think of future users
of your research as archeologists trying to piece together what you did; you
should make their job really easy. This is a self contained computational unit,
and its results, too. Include everything that matters for your computation.
Consider Vagrant [fn:28698f18: http://www.vagrantup.com/] regardless of how much
slower it may run on a virtual. How you defined this document and computed it
and captured and the results are all *one* thing that needs to both be considered
and captured in its entirety.

Mode =B= is a little simpler. All of the hard work has been done. Everything just
mentioned has been done. This is purely responsible for publishing. Perhaps you
want to submit it to a journal, that is publishing. Perhaps you want to post it
on a blog, that is publishing. Publishing has different concerns. You want to
know about the environment used to perform the publishing, like the tools and
the time. Perhaps you want to more about the computer is was published on. All
of those aspects unique to that event of publishing should be included during
export. The operator really needs to get on-board with the idea of
/computational artifacts/ vs /publishing artifacts/.
For example if you execute mode =A= then you need to store all of its generated artifacts. That includes data, but also
graphics that you reference in the document itself. Hopefully you are
questioning my claim here. You should! You area asking "Why should I when I
can reproduce the results?!". Great question. The answer only makes sense
according to the philosophy I am embracing. Mode =A= defines both the computational
unit and its constituent output. That is a single /thing/, a single /thing document/.
Now that I am writing this, I am having questions about my claim here, and I will
explore them as my understanding is bettered. For now, I am sticking with this
because for example I know that I can use PNG anywhere. Well, questions arise
because I am unsure how I would publishing to the web without re-generating SVG
output vs PNG for web vs PS for LaTeX. Definitely something I will need to
explore and for now I am sticking with the plan. Just had lunch and reflected
upon the fact that there is clearly a distinction between the results of your
computation and how you wish to publish them, and when. My feeling is that my
approach is acceptable in that the computation and generation of summary
results is definitely a separate goal from providing it in a particular
publishing format and surely more experience needs to be accumulated here.

Perhaps the simplest thing to do for greater flexibility is to:
- In =A=
  - Perform the computation
  - Capture the results of the computation
  - Produces images and so forth
- In =B=
  - Publish, convert, to a new format

The key questions are:
- May you?
  - Yes you may
- Should you?
  - Perhaps
  - It seems easier to separate concerns into computation and publishing/presentation

That is why evaluation is available on export, to capture aspects unique of
export itself, and *not* of the computation. To realize this, the operator must be
very thoughtful and aware of the execution model of the document. As it stands,
you may separate the time of execution of code blocks and also their results.
This is a subtle yet hugely important idea. You may utilize this feature and
idea anyway you please, but I will use it a certain way. All computational
evaluation and results storage will occur for source blocks in =A=. That is the
goal. However, we do not want that to occur for in-line source blocks in mode =A=.
That is possible and doable, but we do not want it because it would not stay
true to the original goal. Maintaining separation clearly, that normal source is
evaluated at execution time and inline-source is evaluated at publishing time
will make things crystal clear. This will make it easy for the operator of the
document to *see* the difference between results for =A= versus =B= because the latter
will never have its results stored within the source document.

A strict separation between the =A= and =B=, roughly computation and publish, must
be maintained. It is the only way to make sense of how to use =org= as a tool here.
One mode is responsible for computation, and the other is responsible for
publishing. All of the following configuration is performed in order to realize
this goal of A:computation vs B:publishing.

******* Putting the Pieces Together

Make it crystal clear that if the operator wants to evaluate source blocks then
she may do so. It is a fundamental right of every =org= mode user and the default
configuration shall allow it. If she wants restrictions, then they may easily be
added to the document itself.

#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
(gcr/set-org-babel-default-header-args :eval "always")
#+end_src

Separate evaluation into two distinct phases or modes that of =A= for computation
and =B= for presentation/publishing/exportation (still unsure of the best name
given the existing terms both inside and outside of =org=).

During exportation, only evaluate inline source blocks.

#+begin_src emacs-lisp
(setq org-export-babel-evaluate 'inline-only)
#+end_src

During exportation, evaluate the blocks and replace the source blocks with the
resulting value. This gives you exactly what you would expect; the documents
look like plain old documents because they are exactly that.

#+begin_src emacs-lisp
(gcr/set-org-babel-default-inline-header-args :eval "always")
(gcr/set-org-babel-default-inline-header-args :results "value replace")
#+end_src

****** ℝ Specific

Always use the current ℝ session for evaluation.
#+begin_src emacs-lisp
(gcr/set-org-babel-default-header-args:R :session "*R*")
#+end_src

**** KOMA-Script

I enjoy writing letters. I enjoy reading letters. LaTeX produces letters that
are easy to print and read. Org provides a [[http://orgmode.org/worg/exporters/koma-letter-export.html][KOMA Script exporter]] for [[https://www.ctan.org/pkg/koma-script?lang%3Den][koma-script]].
The Org documentation mentions that the user should read the [[http://orgmode.org/cgit.cgi/org-mode.git/plain/contrib/lisp/ox-koma-letter.el][ox-koma-letter.el]]
header documentation.

The [[https://www.ctan.org/pkg/babel?lang%3Den][babel]] packages is mentioned in the Org documentation. The package
documentation explains that it should be used with LaTeX, but not XeTeX. Some
time ago I decided to stick with LaTeX.

Load the KOMA exporter.

#+begin_src emacs-lisp
(eval-after-load 'ox '(require 'ox-koma-letter))
#+end_src

- Understanding KOMA and how to use it
  - There are 4 ways to set letter metadata, listed "from the most specific to
    the most general" (not sure exactly what this statement means, and the conclusion of my notes tries to make sense of what is really going on here and what is the best way to do things)
    - Org option lines (ORG)
    - Separate Org latex classes (LTX)
    - Emacs Lisp variables (LISP)
    - Letter Class Option files (LCO)
- Notes and thoughts on the ways to use it
  - LTX
    - By following the setup directions, you do this, creating "my-letter" class
    - Familiar and easy if you already know LaTeX
      - At some point in your workflow, you *must* define a class to use, anyway
    - Very easy to do, just define the class template and set =org-koma-letter-default-class=
  - ORG
    - Simple way that makes it very easy to just focus on the document content
    - This metadata takes highest priority in the workflow
      - So you should set your typical defaults in LISP or LCO and customize it
        here. This is exactly what I wanted to know.
      - This lets you do your tweaking in each unique file while relying on the
        most common defaults defined elsewhere
  - LISP
    - Very familiar style of configuring things
  - LCO
    - LCO == Letter Class Option filess
    - LCO files are TeX
    - They are included in the generated TeX source code from the letter
    - Gives *full* access to KOMA-Script
      - Big deal, because not everything is exposed through ORG or LISP
      - Also gives full access to any and all TeX and LaTeX code
    - LCO files are a KOMA-Script thing, so they are a LaTeX thing
    -
      #+begin_quote
      Letter metadata set in LCO files overwrites letter metadata set in Emacs
      variables but not letter metadata set in the Org file.
      #+end_quote
    - When you include multiple LCO files, they are evaluted LIFO. Properties
      are set as they first appear, and are not set again. Say you include
      "MyGeneralStuffForAnyLetter.lco" and then include
      "MyStuffSpecificToThisLetter.lco". The specific stuff will get set first.
      Then general stuff will get set last.
      - Surely there is a better way to phrase this. I will work on that.
- Recommendations
  - What is the easiest way to starat using KOMA-Script based on what you know
    today?
  - If you don't know any of the approaches
    - Then choose between learning LaTeX and Org
  - If you only know LaTeX
    - Then you will use the LTX/LCO metadata approach
  - If you only know ORG
    - Then you will use the ORG metadata approach
  - If you only know ORG and LISP
    - Then you will use the LISP approach for general metadata and the ORG
      approach specific metadata
  - If you know LTX/LCO, ORG, and LISP
    - Then you have total flexibility
    - The fact is that
      - ORG settings always trump LTX/LCO and LISP
      - LISP settings are a subset of all of the settings available in
        KOMA-Script, so you will always have to fall back to LTX/LCO if you want
        to use unexposed features
      - LCO files are just plain old LaTeX, which you already know
    - So the best thing to do
      - Is to use ORG for letter-specific settings
      - And LTX for general settings
      - Everything is a lot simpler this way because
        - One less metadata approach to keep track of
        - All KOMA-Script features are present
        - Need to learn details of KOMA-Script package anyway

Configure the default class.

[[https://tex.stackexchange.com/questions/102922/how-can-i-get-us-letter-output-from-koma-scripts-scrlttr2-class][This]] post explains how to default the US letter size. That is the likely default
for my printed correspondence.

#+begin_src emacs-lisp
(eval-after-load 'ox-koma-letter
  '(progn
     (add-to-list 'org-latex-classes
                  '("my-letter"
                    "\\documentclass[paper=letter, pagesize, fontsize=10pt, parskip]{scrlttr2}
\\usepackage[english]{babel}
\\usepackage[osf]{mathpazo}"))

     (setq org-koma-letter-default-class "my-letter")))
#+end_src

There are two formats for the letters: [[http://orgmode.org/w/?p%3Dworg.git%3Ba%3Dblob%3Bf%3Dexporters/koma-letter-new-example.org%3Bh%3D180a9a0e10dd8f7483a67946daf36732c316f821%3Bhb%3D180a9a0e10dd8f7483a67946daf36732c316f821][heading-based]] and [[http://orgmode.org/w/?p%3Dworg.git%3Ba%3Dblob%3Bf%3Dexporters/koma-letter-example.org%3Bh%3De21b8b00c3e895be9dd573d02ea84b08796296a3%3Bhb%3De21b8b00c3e895be9dd573d02ea84b08796296a3][property-based]].

Set up my default LCO files.

#+begin_src emacs-lisp
(setq org-koma-letter-class-option-file "UScommercial9 KomaDefault")
#+end_src

**** ispell

Doing literate programming a *lot*… it is a hassle to spell-check source blocks,
so don't. Actually, there are lots of things that I probably don't want to check
and this list is growing. All of the entries are explained here.

Never ispell org source blocks:
#+begin_src emacs-lisp
(add-to-list 'ispell-skip-region-alist '("^#\\+begin_src ". "#\\+end_src$"))
#+end_src

Never ispell org source blocks defined in upper case:
#+begin_src emacs-lisp
(add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC ". "#\\+END_SRC$"))
#+end_src

Never ispell org example blocks:
#+begin_src emacs-lisp
(add-to-list 'ispell-skip-region-alist '("^#\\+begin_example ". "#\\+end_example$"))
(add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXAMPLE ". "#\\+END_EXAMPLE$"))
#+end_src

Properties block in org do not need to be ispelled
#+begin_src emacs-lisp
(add-to-list 'ispell-skip-region-alist '("\:PROPERTIES\:$" . "\:END\:$"))
#+end_src

Footnotes in org should not be ispelled:
#+begin_src emacs-lisp
(add-to-list 'ispell-skip-region-alist '("\\[fn:.+:" . "\\]"))
#+end_src

Footnoes in org that have http links that are line breaked should not be
ispelled:
#+begin_src emacs-lisp
(add-to-list 'ispell-skip-region-alist '("^http" . "\\]"))
#+end_src

Verbatim regions in org mode should not be ispelled:
#+begin_src emacs-lisp
(add-to-list 'ispell-skip-region-alist '("=.*" . ".*="))
#+end_src

In org I often use bold text in lists, and they should never be ispelled because
they are usually abbreviations or other non-words:
#+begin_src emacs-lisp
(add-to-list 'ispell-skip-region-alist '("- \\*.+" . ".*\\*: "))
#+end_src

Most of the default org export properties should be ignored because they are not
words and I may ispell them manually when desired:
#+begin_src emacs-lisp
(mapc (lambda (it)
        (gcr/ispell-a2isra (gcr/ispell-org-header-lines-regexp it)))
      '("ATTR_LATEX"
        "AUTHOR"
        "CREATOR"
        "DATE"
        "DESCRIPTION"
        "EMAIL"
        "EXCLUDE_TAGS"
        "HTML_CONTAINER"
        "HTML_DOCTYPE"
        "HTML_HEAD"
        "HTML_HEAD_EXTRA"
        "HTML_LINK_HOME"
        "HTML_LINK_UP"
        "HTML_MATHJAX"
        "INFOJS_OPT"
        "KEYWORDS"
        "LANGUAGE"
        "LATEX_CLASS"
        "LATEX_CLASS_OPTIONS"
        "LATEX_HEADER"
        "LATEX_HEADER_EXTRA"
        "OPTIONS"
        "SELECT_TAGS"
        "STARTUP"
        "TITLE"))
#+end_src

**** Hooks

Configure =org= mode hooks to make it easy to do the most commonly performed
operations.

Bit of a mystery that I couldn't =local-set-key= with one particular binding.
Found a way that /does/ work with the help of Jorge and Peak. I'm OK with it
remaining a mystery for now.

#+begin_src emacs-lisp
(define-key org-mode-map (kbd "C-,") (lambda () (interactive) (insert " \\larr ")))
#+end_src

Started questioning why after hitting RETURN while in lists I have to hit TAB to
get indented properly. Kind of a dead giveaway that I should be
return-and-indenting! Looked at =org-return= to find that it has an argument
about indenting and then saw that =org-return-indent= passes it for you. With that
in mind, RETURN is bound to that now. Now ALEC has four different kinds of
"returns" in Org in order of likelihood of usage:
- org-return-indent :: Make it really easy to work in existing list items,
  headings, and tables
  - This is listed first because I often go back to modify entries
  - <return> because it is used the most
- org-meta-return :: Make it really easy to add new list items, headings, and
  table contents
  - M-<return> because the binding comes with Org
- electric-indent-just-newline :: For when I want to break out of the default
  Org indentation to start working at the beginning of the line for example when
  I'm done working in a list or have just created a new heading
  - C-M-<return> because it is next step "lower" in the binding
- gcr/smart-open-line :: When I want to insert a new line between the current
  and next line then position the cursor correctly indented at the start of it.
  - s-<return> because it is that is the last place in the modifier key chain

#+begin_src emacs-lisp
(defun gcr/org-mode-hook ()
  (local-set-key (kbd "C-;") 'gcr/vc-next-action)
  (local-set-key (kbd "<return>") 'org-return-indent)
  (local-set-key (kbd "C-M-<return>") 'electric-indent-just-newline)
  (local-set-key (kbd "C-1") 'org-narrow-to-subtree)
  (local-set-key (kbd "M-1") 'widen)
  (local-set-key (kbd "C-2") 'gcr/org-edit-src-code-plus-name)
  (local-set-key (kbd "C-3") 'org-table-edit-field)
  (local-set-key (kbd "s-h") 'org-babel-check-src-block)
  (local-set-key (kbd "s-i i") 'org-babel-insert-header-arg)
  (local-set-key (kbd "s-j") 'org-babel-previous-src-block)
  (local-set-key (kbd "s-k") 'org-babel-next-src-block)
  (local-set-key (kbd "s-l") 'org-babel-demarcate-block)
  (local-set-key (kbd "s-;") 'org-babel-view-src-block-info)
  (local-set-key (kbd "s-b x") 'org-babel-expand-src-block)
  (local-set-key (kbd "s-b s") 'org-babel-switch-to-session)
  (local-set-key (kbd "s-b c") 'org-babel-switch-to-session-with-code)
  (local-set-key (kbd "s-o") 'org-babel-execute-maybe)
  (local-set-key (kbd "s-t") 'org-babel-tangle)
  (local-set-key (kbd "s-x") 'org-babel-do-key-sequence-in-edit-buffer)
  (local-set-key (kbd "s-w w") 'org-export-dispatch)
  (local-set-key (kbd "s-<f5>") 'org-babel-execute-buffer)
  (local-set-key (kbd "s-i d") 'org-display-inline-images)
  (local-set-key (kbd "s-i r") 'org-remove-inline-images)
  (local-set-key (kbd "C-.") (lambda () (interactive) (insert " \\rarr ")))
  (local-set-key (kbd "$") 'yf/org-electric-dollar)
  (when (and (fboundp 'guide-key-mode) guide-key-mode)
    (guide-key/add-local-guide-key-sequence "C-c")
    (guide-key/add-local-guide-key-sequence "C-c C-x")
    (guide-key/add-local-highlight-command-regexp "org-")))

(add-hook 'org-mode-hook 'gcr/org-mode-hook)
#+end_src

Configure the =org= =babel= source code editing buffer with a key to make it
easy to exit. This is consistent with the approach of "same to exit as enter".

#+begin_src emacs-lisp
(defun gcr/org-src-mode-hook ()
  (local-set-key (kbd "C-2") 'org-edit-src-exit)
  (visual-line-mode))

(add-hook 'org-src-mode-hook 'gcr/org-src-mode-hook)
#+end_src

* TODO User Experience (UX)

AVI provides complete and total distraction free operation. Information is fine
as long as it has to do with files. AVI is only going to work with files and
provide information about them. This holds true to her file-based worldview.

** TODO Communications  & Media

1) IRC will be in another application
2) Email will be in another application
3) Playing music will be in another application

** TODO Colors

1) Choose "quiet" tones that minimize eye strain

** TODO Font

*** TODO Introduction

Choosing my font for ALEC has been a journey. Gosh, that is a very serious word.
It has been a /learning experience/. I never questioned font choice before. Font
design is an art form. Font choice is an art form, too. I learned something.

The purpose of this document is to capture parts of that journey that I valued.

*** TODO Audience

- Computer
  - Users
  - Programmers
  - User experience designers (UXD)
- Non-Computer
  - Readers

Every computer-user has a different strategy for choosing the best font for long
periods working at the computer. They all involve many metrics, strategies, and
rubrics. Based on that, they are probably all wrong. Well not really, they are
right based upon experience, and experience is really all that matters.

Non-computer users are important too. I am one. I love being able to sent a
printed letter for /important things/. I love being able to read when /not/ at a
computer. This journey helped reveal that for me.

I was curious about whether my experience had any basis in reality, and I really
wanted to dig into what is the "right way" to choose a font for any particular
user or situation. The following are notes and ultimately a decision on what is
the best for me. Hopefully the notes alone are revealing and help you reach your
own conclusion, too. At the very least you ought to be educated, informed, and
probably surprised, too, about some of the factors involved in font selection.

*** TODO Resources

I started researching fonts using Internet search engines. I found a bunch of
resources. I read all of them and took notes. This heading captures addresses to
those resources and notes about them.

**** [[http://thenextweb.com/dd/2011/03/02/whats-the-most-readable-font-for-the-screen/][What’s the most readable font for the screen?]]

Serifs are tips for the reader's eyes for flow.

San-serifs are better for low-res.

Simultaneously states that is no difference between serif and san-serif.

Rec: Helvetica/Arial

Comment recommendations:

Designed for digital, Hermann Zapf's Optima, or as a backup Verdana

Designed for digital, Open Sans

Both, Calibri

San-serifs are easier on the eyes as you get older, citing retinal tears
specifically

**** [[http://www.webpagecontent.com/arc_archive/182/5/][Time to change your fonts]]

Designed for screen: Verdana, Trebuchet MS, and (the serif) Georgia.

Easy to read, available on virtually all machines.

Let go of times new roman, Arial, and Helvetica.

Traditionally a serif font was used for the main body of a document, and
sans-serif for headings. Today, those principles are often reversed.

**** [[http://www.awaionline.com/2011/10/the-best-fonts-to-use-in-print-online-and-email/][The Best Fonts to Use in Print, Online, and Email]]

Popular serif fonts are Times New Roman, Palatino, Georgia, Courier,
Bookman and Garamond.

Some popular San Serif fonts are Helvetica, Arial, Calibri, Century
Gothic and Verdana.

It's been said that serif fonts are for "readability," while sans-serif
fonts are for "legibility."

Best fonts for online: go with sans-serif.

2002 study by the Software Usability and Research Laboratory:
- The most legible fonts were Arial, Courier, and Verdana.
- At 10-point size, participants preferred Verdana. Times New Roman was
  the least preferred.
- At 12-point size, Arial was preferred and Times New Roman was the
  least preferred.
- The preferred font overall was Verdana, and Times New Roman was the
  least preferred.

For easiest online reading, use Arial 12-point size and larger. If
you're going smaller than 12 points, Verdana at 10 points is your best
choice. If you're after a formal look, use the font "Georgia." And for
older readers, use at least a 14-point font.

Dr. Ralph F. Wilson, an e-commerce consultant, did a series of tests in
2001. He also came to the conclusion that the sans-serif fonts are more
suited to the computer screen.Some of the highlights of the test results
were that at 12 points, respondents showed a preference for Arial over
Verdana -- 53% to 43% (with 4% not being able to distinguish between the
two).Two-thirds of respondents found that Verdana at 12 points was too
large for body text, but Verdana at 10 points was voted more readable
than Arial at 10 points by a 2 to 1 margin.In conclusion, for the best
font readability, use Arial 12 point or Verdana at 10 points and 9
points for body text. For headlines, he suggests using larger bold
Verdana.

Comments: Good.

My comments: no links to cited papers

**** [[https://tex.stackexchange.com/questions/20149/which-font-is-the-most-comfortable-for-on-screen-viewing][Which font is the most comfortable for on-screen viewing?]]

Post: Advice to use san-serif is outdated and inappropriate for today's
high resolution screens. San-serif or not is irrelevant; instead the
measure of success is to use a large font that was specifically designed
for on-screen usage. For inspiration, look at the free fonts listed at
the Google Web Fonts directory, especially Vollkorn or the Droid Serif
font which was particularly developed with small font size in mind.

GCR: That post is confusing because he later explains that we are not
there yet, but rather getting close.

Post: Sans-serif are best for on-screen.

**** [[http://www.google.com/fonts/specimen/Vollkorn][Vollkorn]]

**** [[http://www.google.com/fonts/specimen/Droid+Serif][Droid Serif]]

**** [[http://river-valley.zeeba.tv/minion-math-a-new-math-font-family/][The Design of a New Math Font Family]]

Interesting.

**** [[http://edutechwiki.unige.ch/en/Font_readability][Font readability]]

Legibility refers to being able to read a text in bad conditions.
“Legibility is concerned with the very fine details of typeface design,
and in an operational context this usually means the ability to
recognize individual letters or words. Readability however concerns the
optimum arrangement and layout of whole bodies of text”

Studies that contrast serif vs. non-serif fonts seem to be
controversial.

There are some ground rules one can find, like:
- Don't make long lines nor too long paragraphs
- Use wide fonts such as Palatino or Verdana for small fonts
- Use spaces between lines, e.g. about 1.2 at least. E.g. in Word 2007,
  1.15 is the default I believe. to be controversial.

Sans serif: Verdana (a humanist font) or Arial

Serif: Georgia

Some references for studies and research done on fonts.

“two roles for type: a functional role (relating to legibility) and an
aesthetic/semantic role, which impacts the "apparent 'fitness' or
'suitability' for different functions, and which imbue it with the power
to evoke in the perceiver certain emotional and cognitive response" (p.
38)””

In her study: Calibri came out as a winner against Courier New and Curlz.

GCR: Very exciting and interesting with good links

**** [[http://usabilitynews.org/the-effect-of-typeface-on-the-perception-of-email/][The Effect of Typeface on the Perception of Email]]

People take Calibri seriously via this study.

**** [[http://usabilitynews.org/know-your-typefaces-semantic-differential-presentation-of-40-onscreen-typefaces/][Know Your Typefaces! Semantic Differential Presentation of 40 Onscreen Typefaces]]

Study showing how people emotionally react to certain fonts.

**** [[http://typoface.blogspot.com/2009/08/academic-base.html][The Academic Evidence Base for Typeface Readability]]

Study.

Young people like serif; older like sans-serif.

**** [[http://liinwww.ira.uka.de/bibliography/Typesetting/reading.html][Bibliography on font readability]]

Links to papers on font readability.

**** [[http://www.kathymarks.com/archives/2006/11/best_fonts_for_the_web_1.html][Best Fonts for the Web]]

Serif: Georgia. It was designed especially for screen. Other options are
listed.

Sans-Serif: Tahoma. Geneva, Tahoma, and Verdana were designed especially
for the screen. Tahoma in particular is cited for legibility. Another
pick: Lucida Sans Unicode: Cited as remarkably legible for some reason.

Monospaced: Monaco/Lucida Console.

GCR: Great article.

**** [[http://psychology.wichita.edu/surl/usabilitynews/52/uk_font.htm][A Comparison of Two Computer Fonts: Serif versus Ornate Sans Serif]]

Another study, unsure what to conclude from it.

**** [[http://usabilitynews.org/a-comparison-of-popular-online-fonts-which-size-and-type-is-best/][A Comparison of Popular Online Fonts: Which Size and Type is Best?]]

Excellent details.

Tahoma and Verdana, sans-serifs, were designed specifically for viewing
on computer screens. J, I, and 1 were made distinguishable. Tahoma is
wider than Verdana.

Great article but leaves so many questions and stuff unanswered and
explored.

**** [[http://usabilitynews.org/a-comparison-of-popular-online-fonts-which-is-best-and-when/][A Comparison of Popular Online Fonts: Which is Best and When?]]

Big fonts generally don't matter and are easy to read.

Tahoma is well-read.

Verdana and Georgia have good legibility.

Whole other range of evaluations: personality, elegant, youthful and
fun, business-like,

Most legible: Courier, Comic, Verdana, Georgia, and Times.

**** [[http://kadavy.net/blog/posts/design-for-hackers-why-you-dont-use-garamond-on-the-web/][Design for Hackers: Why You Don’t Use Garamond on The Web]]

I only read this article months after reading the bulk of references in this
section. It took time it to sink and for me to accept it. It is so easy to
produce a letter in LaTeX, and just send a PDF. It should really be printed,
though. So, what is the right medium and what is the right font? For formal
things, things worth writng, I say paper.

I read it again and noted the following:

You must know your target market's viewing medium. If it is computer-users, then
"its better to use a modern font that has been drawn with the screen in mind.".
The fact "is that our display technology isn’t up to par with paper.".

That makes it simple: I don't know the target audience. I loved the printed
word. I love something real that engages touch and smell in addition to sight.
By that measure, I am my own target audience, and it is simple: printed
literature will be done using Garamond.

**** [[http://www.webdesignerdepot.com/2013/03/serif-vs-sans-the-final-battle/][SERIF VS. SANS: THE FINAL BATTLE]]

I was curious again so I searched for articles to share with people who haven't
done any research on the topic. I found this one. It is good. It "expertly
explains why serif is better for print and sans serif is best suited for web".
"For web" really means "For a low-resolution monitor". What is the right thing?
In modern times, obviously the screen. That makes the most sense. Perhaps there
is a really easy way to switch printed fonts? My use case is quite minimal: I
love easily read text for important letters. They are few and far between.
However, they are important. Is a resume that important? Not really.
Correspondence is, though. That is the thing that I value. Printed
correspondence. Perhaps that is just fine? If it is kind sorta not super perfect
on-screen, perhaps that is OK, because the printed, viewable, touchable, and
smellable form will always be the most delightful.

*** TODO Questions & Answers

The questions are simple.

Reality is high-resolution. Computer screens are low-resolution. Font designers
create fonts to make it easy for you to read given the medium. Choose the right
font for the medium. Serif is for printed text. San-serif is for computer
screens.

You must make a decision about your medium. To do that, you you must be able to
define your intent and your goal.

Most of my trade work is performed on a computer screen. This is at least six
hour a day. I value this tool, the computer and its screen. This is an important
medium.

My content publishing is performed on a computer screen. I consume blogs using a
computer screen. I value that. I publish a personal notebook style blog. I value
that.

Most of my important personal interaction is performed on a printed piece of
paper. This is called correspondence. Org and TeX produce fine documents that
are easy to read. Important things deserve to be printed and shared without a
power cord. This is an important medium.

I want a good font for all 3 mediums.

**** Retrospective

This definition of 3 mediums became clear only later. It took time for me to
understand them, the difference, and their value. Font decisions become to clear
once you understand your audience and your medium. That is when the fun starts
skyrocketing. There is so much creativity in entire process. It is really all
quite delightful.

*** TODO Goals & Medium

**** TODO Literate Programming on a Computer

- Research
  - Emacs is the primary environment
  - [[Resources]] provided plenty
  - [[http://ergoemacs.org/emacs/emacs_unicode_fonts.html][Best Unicode Fonts for Programming]]
    - Nice article
    - Nice discussion
    - Great link to the [[http://www.fsd.it/fonts/pragmatapro.htm][PragmataPro]] font
      - As you read about the font, you can feel the passion of the designer
      - Excellent examples, clearly a lot of love went into this!
  - [[http://www.slant.co/topics/67/viewpoints/4/~what-are-the-best-programming-fonts~dejavu-sans-mono][What are the best programming fonts?]]
    - Tons of coding related fonts. Why not for reading?!
    - Source Code Pro is highest ranked, then Consolas, and Monaco
    - I really care about reading, too, literate programming is a big big deal
    - I've since changed this heading to make it obvious what the use case
      really is
  - [[http://www.codeproject.com/Articles/30040/Font-Survey-42-of-the-Best-Monospaced-Programming][Font Survey: 42 of the Best Monospaced Programming Fonts]]
    - The options, although only 42, are insanely overwhelming.

- Thoughts
  - Current state of technology along with aging-eyes means that sans-serif is the
    best option
  - Emacs suggest mono-spaced fonts for coding
  - Experienced teaches me that Unicode support is mandatory
  - Prefer fonts that focus on legibility over emotional evocation
  - Like: Verdana, Calibri, Tahoma, Lucida Sans Unicode, Lucida Sans Console
  - DejaVu Sans Mono: best Unicode support
    - Based on Andale Mono, a monospaced san-serif designed for coding

- Conclusions
  - There isn't a ton of digestible info available on Unicode support for
    the fonts that I listed.
  - I am recalling now that my original selection of DejaVu Sans Mono was
    specifically for its excellent Unicode support; specifically that it
    had better support than Lucida Console which is monospaced but lacked
    characters and looks at least as nice.
  - Seems like it is just haphazard and quasi-scientific how people are
    choosing fonts; and maybe even designing them.
  - Found evidence that Lucida is just fine for display; and thus
    DejaVu Sans Mono is fine for display.
  - PragmataPro is intriguing
  - I want a great font for Literate Programming
    - Good for code
    - Good for the written word
    - On a computer screen, both are first class citizens
    - Must be perfect for both

- Decisions
  - DejaVu Sans Mono is the best available font

**** TODO Publishing on a Computer

- Research
  - WordPress is the primary environment
  - [[Resources]] provided plenty

- Thoughts
  - Nothing to add: Georgia is a serif designed for the web

- Conclusions
  - MS Word introduced me to Georgia and I loved it >7 years ago
  - Georgia has served me well on W&W for 7 years
    - That is for content
    - Headings are Arial (san-serif)
  - Georgia readily available and I already love it for on-screen reading

- Decisions
  - Georgia is the best available font

**** IN-PROGRESS Correspondence on Printed Paper

- Research
  - TeX
    - Limiting study to first 3 pages or search results, or so
    - TeX is the primary environment
      - There is plenty of history out there, and it is delightful
      - [[https://www.tug.org/levels.html][The levels of TeX]] and [[https://tex.stackexchange.com/questions/42594/tex-family-tree-with-timeline%5D][TeX family tree with timeline]]
        - Distribution :: Provides computer artifacts
          - What are TeX Live and MikTeX defaults for the following?
        - Front end :: An editor for the artifact input to an engine
        - Engine :: Programs that implement TeX, aka compiler
        - Format :: The TeX language used, eg TeX vs LaTeX
        - Package :: Software artefact extending the base feature of the engine
      - Engines
        - Current
          - TeX :: Never touched (NT)
          - pdfTeX :: Used this for a while because it is the same as TeX
          - XeTeX :: Provides first-class UTF8 (FCU) and [system, OpenType,
            TrueType]-font support (SFS), NT
          - LuaTeX :: Nearly switched to this, then I learned Org, FCU, SFS, NT
            - [[https://tex.stackexchange.com/questions/126206/why-choose-lualatex-over-xelatex][Why choose LuaLaTeX over XeLaTeX?]]
            - The more I re-visit this the *more* intriguing it becomes
        - I want to
          - Maximize reuse of existing experience
          - Get pleasant documents
          - Always end up with PDF
          - Get nice optimization and fonts
          - Stay very close to the mainstream
        - pdfTeX seems like the best choice
      - Formats
        - Current
          - TeX :: Don't know it
          - LaTeX :: Know it
          - ConTeXt :: Don't know it
            - [[http://www.berenddeboer.net/tex/LaTeX2ConTeXt.pdf][LaTeX in proper ConTeXt]]
        - LaTeX seems like the best choice
    - Knuth's LP
      - [[https://en.wikipedia.org/wiki/WEB][WEB]] :: Knuth's LP compiler
      - [[https://tug.org/web2c/][Web2C]] :: "is an implementation of TeX and friends which translates the
        original WEB sources written by Donald Knuth into C, so they can be readily
        compiled on modern systems. Kpathsea is a library providing path searching
        and other common functionality that Web2C and other programs use."
        - Wonder if they mean "translate" instead of "compile"?
    - How To and Other Posts about Engines
      - [[https://yoo2080.wordpress.com/2014/03/09/how-to-use-unicode-in-latex-by-luatex-or-xetex/][use Unicode in LaTeX (by LuaTeX or XeTeX)]]
        - What is my primary language? English.
      - [[http://www.faqoverflow.com/tex/3094.html][FAQ overflow question about switching from pdfTeX to Xe/LuaTeX]]
        - "multilanguage support is more problematic"
      - [[http://www.texdev.net/2009/05/21/lua-tex-latex-and-context/][Lua, TeX, LaTeX and ConTeXt]]
        - Thoughts about understanding the engines and formats
    - TeX Packages Mentioned
      - [[http://www.ctan.org/tex-archive/macros/latex/contrib/fontspec/][fontspec]] :: "provides an automatic and unified inter­face to feature-rich
        AAT and OpenType fonts through the NFSS in LATEX run­ning on X∃TEX or
        LuaTEX engines Mentioned: features here are provided in base LuaTeX and
        XeTeX"
      - [[http://www.ctan.org/pkg/microtype][microtype]] :: "interface to the microtypographic extensions that were
        introduced by pdfTEX and have since also propagated to X∃TEX and LuaTEX:
        most prominently, character protrusion and font expansion, furthermore the
        adjustment of interword spacing and additional kerning, as well as
        hyphenatable letterspacing (tracking) and the possibility to disable all
        or selected ligatures."
      - [[https://www.ctan.org/tex-archive/fonts/utilities/fontinst?lang%3Den][fontinst]] :: "a program that helps with installing fonts for (La)TeX"
      - [[https://www.ctan.org/pkg/babel?lang%3Den][babel]] :: "manages culturally-determined typographical (and other) rules,
        and hyphenation patterns for a wide range of languages". Single or
        multiple in a single document.
      - [[https://www.ctan.org/pkg/polyglossia?lang%3Den][polyglossia]] :: "pro­vides a com­plete Ba­bel re­place­ment for users of
        LuaLATEX and X∃LATEX; it re­lies on the fontspec pack­age, ver­sion 2.0 at
        least."
      - [[http://www.ctan.org/tex-archive/fonts/utilities/fontools/][fontools]] :: "Tools to sim­plify us­ing fonts (especially TT/OTF ones)"
      - [[https://www.ctan.org/pkg/fontenc?lang%3Den][fontenc]] :: Standard package for selecting font encodings
        - The package allows the user to select font encodings, and for each
          encoding provides an interface to ‘font-encoding-specific’ commands
          for each font. Its most powerful effect is to enable hyphenation to
          operate on texts containing any character in the font.
        - The fact that one should use =T1= pops up quite frequently
  - Fonts
    - Some time ago I concluded that Garamond is the ideal font for printed page.
      The work to do now, here, is to identify the best version of Garamond
      available that works with pdfTeX and LaTeX
    - Providers
      - [[http://www.tug.dk/FontCatalogue/garamond/][URW Garamond]]
        - Have used this for correspondence before and liked it
        - Free
        - Available as Type 1, might be important for quality
        - Seems to be part of mathedesign
      - [[http://www.georgduffner.at/ebgaramond/][EB Garamond]]
        - Stuf from the home page
          - Index
            - Very exciting to read about
            - Cool to do OSS
            - Seems to be learning about fontography, very cool
          - Design
            - Not a mathematician
            - 12 point is ready for use
            - 10 point might be ready for use
            - 6, 8, 18, and 40 are not ready for use
          - Features
            - Font design looks really fun to learn about
            - From the Specimen doc
              - "This font is intended primarily for texts"
            - Download
              - [[https://github.com/georgd/EB-Garamond][GitHub]]
              - qt
                #+begin_quote
                This project is under heavy development. Don’t expect the fonts
                to be anywhere near to ready or perfect. Everything might be
                subject to change—from the dots on the i’s to the very name of
                this project and of the fonts.
                #+end_quote
        - [[http://www.ctan.org/tex-archive/fonts/ebgaramond][EB Garamond CTAN page]]
        - LaTeX, pdfLaTeX, XeLaTeX and LuaLaTeX
        - Includes microtype configuration
        - MiKTeX and TeX-Live call it =ebgaramond=
        - Adobe Type 1 and OpenType
        - Via [[https://tex.stackexchange.com/questions/60098/eb-garamond-on-latex][EB Garamond on LaTeX]]
          - "Package options for old style/lining figures, and
             proportional/tabular figures are osf, lf, p, and t, among others."
      - [[https://store1.adobe.com/cfusion/store/html/index.cfm?event%3DdisplayFontPackage&code%3D1703][Adobe Garamond Pro]]
        - From the home page
          - Separate fonts as regular, italic, semibold, semibold-italic,
            bold, bold-italic (+ 35 35 35 35 35 35) $210USD
            - Adobe® Garamond® Pro Regular
            - Adobe® Garamond® Pro Italic
            - Adobe® Garamond® Pro Semibold
            - Adobe® Garamond® Pro Semibold Italic
            - Adobe® Garamond® Pro Bold
            - Adobe® Garamond® Pro Bold Italic
          - "Buy this package": $169USD
          - [[http://www.fonts.com/font/adobe/adobe-garamond/complete-family-pack][Fonts.com]]: $169USD
            - Lists actual file names
              - AGaramondPro-Regular.otf
              - AGaramondPro-Italic.otf
              - AGaramondPro-Semibold.otf
              - AGaramondPro-SemiboldItalic.otf
              - AGaramondPro-Bold.otf
              - AGaramondPro-BoldItalic.otf
          - Related OpenType package: [[https://store1.adobe.com/cfusion/store/html/index.cfm?store%3DOLS-US&event%3DdisplayFontPackage&code%3D1902][Adobe Type Basics OpenType Edition]]
            - Adobe® Garamond® Pro Regular
            - Adobe® Garamond® Pro Italic
            - Adobe® Garamond® Pro Semibold
            - Adobe® Garamond® Pro Semibold Italic
            - Gill Sans® Std Roman
            - Gill Sans® Std Italic
            - Gill Sans® Std Condensed
            - Gill Sans® Std Bold Condensed
            - $99USD
          - Font type: OpenType
          - EUL: 5 computers
          - Typeface notes: Nice
          - Optical size: Adobe Garamond Pro family is designed to be used at a
            text size of 12.0 points.
          - [[https://store1.adobe.com/type/browser/pdfs/AdobeGaramondPro.pdf][Specimen Book]]
            - Great overview of the history and the tech
            - Talks about how Garamond wasn't Garamond for a while!
            - Garamond *and* Granjon!
            - Two approaches: chose particular size
            - Egenolff-Berner Speciment mentioned!
            - Interesting to see oldstyle and lining figures
            - Titling capitals, too
            - Ligatures, fractions, superiors, inferiors, numerators,
              denominators
            - Superior letters
            - Accented glyphs
            - Ornaments
        - Referenced [[http://www.tex.ac.uk/tex-archive/info/fontname/adobe.map][font map]], assume that these are the Adobe Garamond!
          - AGaramond-Regular
          - Agaramond-Italic
          - AGaramond-Semibold
          - AGaramond-SemiboldItalic
          - AGaramond-Bold
          - AGaramond-BoldItalic
      - [[http://www.ctan.org/tex-archive/fonts/mathdesign/][mathedesign Mathematical fonts for URW and Adobe]]
        - Does this provide fonts or a wrapper/integrator for them?
        - Mentions both URW and Adobe Gramond Pro... what is this?
        - Contain directions for how to install the AdobeGaramondPro font!
          #+begin_quote
          The Math Design project offers free mathematical fonts that match
          with existing text fonts.
          To date, three free font families are available: Adobe Utopia, URW
          Garamond and Bitstream Charter. Three commercial fonts are also
          supported: Adobe Garamond Pro, Adobe UtopiaStd and ITC Charter.
          Mathdesign covers the whole LATEX glyph set, including AMS symbols
          and some extra. Both roman and bold versions of these symbols can be
          used. Moreover you can choose between three greek fonts (two of them
          created by the Greek Font Society).
          #+end_quote
    - Adobe Garamond and mathedesign seem like the best choice
  - Setting it up: Fonts and Engine
    - Articles
      - [[http://arstechnica.com/civis/viewtopic.php?t%3D214368][Using Garamond font in LaTeX?]]
        - Note about how the Adbobe is the best
        - At the time only Type 1 was available
      - [[http://gael-varoquaux.info/science/garamond-fonts-for-latex.html][A Post]]
        - "One remark on this example: you should never, ever, use the standards
          out-of-the-box T1 fonts with pdfLaTeX, they look ugly. Always include
          the “lmodern” or “pslatex” package, that uses much better postscript
          fonts."
        - Wonder if this is important for pdfTeX? Know that T1 is mentioned in the
          Org setup
          - Seems you can choose to [[http://orgmode.org/worg/org-contrib/babel/examples/article-class.html][not load it]] at all, see fontenc.
      - [[http://www.latex-community.org/forum/viewtopic.php?f%3D44&p%3D49978][Garamond font in LaTeX?]]
        - Mentions that you should use =mathdesign= with Garamond
      - [[http://www.lagom.nl/latex/agaramond.html][Adobe Garamond and math symbols in LaTeX]]
        - A stand-alone implementation?!
        - Lists out exactly which fonts *must* be installed
          - Good to know, I should check how they are handled in the above
        - Mention Touch of Classics Adobe Garamond
          - [[http://www.logisoft.com/clp-adobe-type-classics-for-learning.html][Here]]
            - $37.59USD
            - Has Garamond listed
      - [[http://latexniques.wikidot.com/garamond][Garamond]]
        - Helper page to resources
        - There is a package for Gael's changes to urw-garamond

- TO READ
  - Firstly
    - http://nitens.org/taraborelli/latex
    - http://tex.blogoverflow.com/2011/08/putting-colors-in-initials/
    - http://bengreen.eu/fancyhtml/techiestuff/latexongentoo.html
    - http://mactex-wiki.tug.org/wiki/index.php/Typefaces
    - http://web.willbenton.com/writing/2008/better-latex
    - http://www.ntg.nl/maps/29/13.pdf
  - Secondly
    - https://tex.stackexchange.com/questions/112313/adobe-garamond-pro-otf-with-mathdesign
    - https://tex.stackexchange.com/questions/83707/adobe-garamond-and-latex-linux
    - http://web.ece.ucdavis.edu/~jowens/code/otfinst/
    - http://www.techques.com/question/31-2798/Adobe-Garamond-Pro-not-working-with-XeLaTeX
    - http://latex-community.org/forum/viewtopic.php?f=62&t=25922
    - http://garamond.org/
    - https://bbs.archlinux.org/viewtopic.php?id=59353
    - http://dluat.com/adobe-garamond-pro-in-latex/
    - https://www.tug.org/pipermail/macostex-archives/2008-May/035245.html
    - https://www.tug.org/pipermail/xetex/2004-November/001235.html
    - http://miktex.org/packages/mathdesign
    - https://groups.google.com/forum/#!topic/comp.text.tex/owbCsQVb2N0
    - http://snorriheim.dnsdojo.com/doku/doku.php/en:linux:publishing:xelatex:fonts
    - http://poset.jp/agaramond/
    - http://compgroups.net/comp.text.tex/installing-open-type-fonts-in-latex/1913431
    - http://thetrendythings.com/read/12944
    - http://latex-alive.tumblr.com/post/643148677/fontspec-for-luatex
    - http://bbs.ctex.org/forum.php?mod=viewthread&tid=59901
  - Thirdly
    - https://lists.gnu.org/archive/html/emacs-orgmode/2010-07/msg01060.html
    - https://github.com/tlvince/latex-letter/tree/master/src
    - http://tex.stackexchange.com/questions/134087/why-shouldnt-i-use-the-mathdesign-package
    - http://tug.ctan.org/fonts/psfonts/w-a-schmidt/pad.txt
    - http://web.ece.ucdavis.edu/~jowens/code/otfinst/
    - http://tex.stackexchange.com/questions/178544/install-adobe-garamond-pfb-afm-for-miktex
    - http://mirrors.ibiblio.org/CTAN/fonts/psfonts/w-a-schmidt/README
    - https://bbs.archlinux.org/viewtopic.php?id=59353
    - https://www.ctan.org/pkg/microtype?lang=en
    - http://tex.stackexchange.com/questions/3395/which-packages-can-you-use-to-improve-the-typographic-quality
  - http://tex.stackexchange.com/questions/24691/how-to-install-otf-fonts-with-otfinst-py
  - Out There
    - What if I never printed one of these letters?
      - What if they were electronic only?
      - Could it be?
      - [[https://tex.stackexchange.com/questions/188200/georgia-font-lookalike][Georgia font lookalike {closed}]]
        - Palatino with the osf option, =[osf]{mathpazo}=

- Thoughts

- Conclusions

- Decisions

*** TODO This

- Add font names in here to my dictionary
- Copy this document in publishing
- Get open tabs from ipad on this topic
- Take tons of notes
- Get it working
- So many, microtype and more omg, mathworks
- Signature image from paint.net, where is the original?
  - PDF?

* TODO Provisioning

** Background

In /the old days/, the way that you managed software packages for Emacs was to do
it manually because there was no software distribution system available. In my
case, I just put everything inside of a Subversion project and moved on. That
actually worked fine, but I didn't like committing compiled code, and handling
updates was always a hassle depending on how files and the directory structure
had changed. Fortunately that all changed with the introduction of Package and
ELPA.

When I first cut my system over to ELPA I went with GNU ELPA and Marmalade.
Eventually I found that they weren't the right thing for me since the former had
a very small collection and the latter, strangely, had exactly what I wasn't
looking for. About that time, MELPA was starting to really gain momentum.

MELPA is really a community and a belief-system in addition to being a package
repository. They value structure and form, and make sure that the package
builds, and then they do the building for you. They are doing great things to
create, nurture, and guide the community to define a higher standard for package
quality. Around that time, too I got fed up with manually installing and
worrying whether I had the packages installed or not, so after figuring that
there was something better than some custom code that I wrote, I looked at Cask.

Cask is a declarative approach for expressing dependencies. That sounds fancy
but it isn't. Cask just makes it really easy to obtain ELPA packages from
different repositories. One reason that I really like is that you see all of
your packages in a single place rather than sprinkled about all over your
initialization file. It also lowers the bar for new users to with just one line
of code add a new repository. Something funny happened though, the more I
learned about Emacs and the community, the more I found the need to manage
software not hosted in MELPA.

MELPA is perfect at what it does, and it is still evolving. Rather than try to
plan for everything, they decided to solve 80% of most problems for most people
and that is super. Now they are looking at how to handle versioned packages by
hosting a stable repository that uses Git tags, and that is super, too. What
about software that doesn't live in a package though?

You start finding code all over not in packages. EmacsWiki is the exception
given that MELPA supports that. What about random Emacs-Lisp code you find out
on the 'Net? That question got me motivated to learn about other people's
approaches for package management. That is where I learned about EL-Get.

EL-Get is powerful, and flexible, and concise. What it lacks in community
momentum, it makes up for in raw power. When I find code that doesn't live in
packages, and may never, then I start setting up EL-Get to grab it for me.

Based upon what I've read, it had its time in the sun. Its power is still true,
and its value is a great, because it truly succeeds at the goals that it set out
on.

The first time I set up Cask, it was the only option for easily specifying which
repository you wanted to use for installing a package. It was great. Then, I got
the bug to be able to easily collaborate with others by sending them a single
initialization file. Kind of a theoretical goal, but there is *one* person with
whom I want to collaborate that makes it completely make sense. More than a year
after switching from Subversion to Cask, I dug into the options out there today.

My foray into EL-Get was kind of a mistake, since its role had changed in the
community between then and its inception. I spent a lot of time not being
productive there. Then I figured that Cask would be fine, but at the time
it did not run easily on Windows, which is really important to me. Based on
that, I quit pursuing Cask as an option. From what I read, Cask does now run
easily on Windows, but I am not revisiting it for now.

One mistake that I made here was assuming that recipes would be the same between
EL-Get and Cask. Doh! Of course they wouldn't be. The nice side-effect here
though was learning the power of EL-Get. It is very powerful.

The great news as of 24.4 is that Package inside of Emacs allows you to specify
the source repository from which to install a package. This is a hugely
important feature and I am thrilled on all user's behalf's. The old problem was
that sometimes you might want the stable version of Foo and something you want
the development version of Foo. The problem was that you never quite knew which
one you would get because the packages lived in *both* repositories! Now, it is no
longer an issue, and one of the reasons that I don't need to use Cask anymore.
Package should do it all, and it will, below. That was my plan. It failed.

My approach was simple. First I identified all of the packages that I used that
were available on MELPA Stable. Then added MELPA Stable as a repository and
added all of those packages to =package-pinned-packages=. To help me out, I also
added a separate entry just to pull MELPA packages that were not ELPA packages.
On this setup, it worked about %75 of the time. I couldn't figure out why. I
tried every permutation. I removed entries. It wasn't enough. It never worked
right. Here is what it did:

What is happening is simple
- Delete the ELPA directory
- Start this system
- Packages that are pinned to MELPA Stable are installed from MELPA

Long ago Steve Purcell asked someone on GitHub why they want stable. I don't
recall the exact conversation. Perhaps I asked something. His answer was really
simple. It was something like "Going with the TRUNK tends to be fine. If it
breaks, it usually gets fixed quickly". I understood. I just *really* wanted to
try the /reproducible research/ thing with this system. I was very gung-ho about
it. It didn't work out though. Then I started loading everything from MELPA. At
that point, everything worked _perfectly_. I tested it 5 times. I look forward to
seeing how it works out in the future. It is certainly consistent with what
Purcell shared.

** Package & Use-Package

Package management involves downloading packages from the Internet to
install them. It occurs in this system using Package and Use-Package.

Before doing any work with Package it must be initialized. Failure to do so is
the easiest way to waste time and achieve nothing.

#+begin_src emacs-lisp
(package-initialize)
#+end_src

MELPA is critical.

#+begin_src emacs-lisp
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
#+end_src

GNU stuff is always good.

#+begin_src emacs-lisp
(add-to-list 'package-archives
             '("gnu" . "http://elpa.gnu.org/packages/"))
#+end_src

Hours have been wasted trying locate and create a good reusable approach for
installing packages before system load. Package+ was a decent approach but still
wasn't right for me.

Use-Package needs to be installed manually. Install it by hand. After that,
Use-Package will manage all of the package installations.

#+begin_src emacs-lisp
(defun gcr/warn-use-package ()
  "Report use-package misconfiguration."
  (interactive)
  (unless (package-installed-p 'use-package)
    (warn "Please install 'use-package by hand. To do so, run `list-packages', search for it, position the cursor on it, and install it by typing `i', `x', 'yes', and finally restart EMACS.")))
(gcr/warn-use-package)
(require 'use-package)
#+end_src

** Packages
*** Alert

Used on graphics systems for pretty notifications. It is helpful.

For a while I went on a quest to get the =Message= buffer to include time-stamps
on each entry. EmacsWiki had some decent approaches but none of them worked
right for me and I didn't want to dig further. Eventually though I got tired of
having to pay close attention to the minibuffer or =Messages= for stuff and
just started looking for GUI options. The plan is to have =Messages= for most
stuff and if there are alerts by any definition then I want that to be an
option. First choice was todochiku [fn:4f2e6828: http://melpa.milkbox.net/#/todochiku] due to the high download count but
two issues, it didn't work and it is not used by anything else. Alert [fn:fd4688ce: http://melpa.milkbox.net/#/alert],
on the other hand, is, and also lives on Github meaning that it is maintainable.

#+begin_src emacs-lisp
(use-package alert
             :ensure t
             :if (display-graphic-p)
             :config
             (setq alert-fade-time 10)
             (gcr/on-gui
              (gcr/on-osx
               (setq alert-default-style 'growl)))
             (setq alert-reveal-idle-time 120)
             )
#+end_src

* TODO Helper Functions Post-Provisioning
* TODO Org-Mode Post-Provisioning

Load the =ob-sml= package. Perhaps some day it will end up in the mainline.

#+begin_src emacs-lisp
(use-package ob-sml
             :ensure t
             :config
             (require 'ob-sml nil 'noerror)
             (add-to-list 'org-babel-load-languages
                          '(sml . t)))
#+end_src

Notify the operator of tangle times.

#+begin_src emacs-lisp
(defun gcr/org-babel-tangle (orig-fun &rest args)
  "Display tangling time."
  (gcr/save-all-file-buffers)
  (let ((start (current-time)))
    (message (concat "org-babel-tangle BEFORE: <"
                     (format-time-string "%Y-%m-%dT%T%z")
                     ">"))
    (apply orig-fun args)
    (let* ((dur (float-time (time-since start)))
           (msg (format "Tangling complete after: %.06f seconds" dur)))
      (message (concat "org-babel-tangle AFTER: <"
                       (format-time-string "%Y-%m-%dT%T%z")
                       ">"))
      (message msg)
      (gcr/on-gui (alert msg :title "org-mode")))))

(advice-add 'org-babel-tangle :around #'gcr/org-babel-tangle)
#+end_src

* TODO Accessibility

** TODO Philosophy

** TODO Means

** TODO Fonts

** TODO User Experience

*** TODO Hardware

*** TODO Software

**** TODO Operating System

*** TODO EMACS

*** TODO Performance

*** TODO Languages

* TODO Critical Next Steps

- Mac key bindings
- Appearance
- Space Control
- Need Magit ASAP

# In the org mode hook
  # (fci-mode)
  # (gcr/untabify-buffer-hook)
  # (turn-on-stripe-table-mode)
  # (linum-mode)
  # (wrap-region-mode t)

# There is an auto-complete provider for org-mode [fn:a94049d3: https://github.com/aki2o/org-ac]. Nice as I didn't even
# think to check. Perhaps a check should go on the standard setup list. This seems
# to work when you type out things like block definitions; and it won't apply
# to EasyTemplate generated regions. =auto-complete= will still work on them,
# though:
# #+begin_src emacs-lisp
# (require 'org-ac)
# (org-ac/config-default)
# #+end_src

#  LocalWords:  Schulte's Purcell's GPL'd TODO Prakriti's
